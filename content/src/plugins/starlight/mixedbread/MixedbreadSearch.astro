---
import "./variables.css"

const pick = (keyStart: string) =>
  Object.fromEntries(
    Object.entries(Astro.locals.t.all())
      .filter(([key]) => key.startsWith(keyStart))
      .map(([key, value]) => [key.replace(keyStart, ""), value])
  )

const mixedbreadTranslations = {
  placeholder: Astro.locals.t("search.label"),
  translations: {
    button: {
      buttonText: Astro.locals.t("search.label"),
      buttonAriaLabel: Astro.locals.t("search.label")
    },
    modal: {
      searchBox: pick("mixedbread.searchBox."),
      startScreen: pick("mixedbread.startScreen."),
      errorScreen: pick("mixedbread.errorScreen."),
      footer: pick("mixedbread.footer."),
      noResultsScreen: pick("mixedbread.noResultsScreen.")
    }
  }
}
---

<sl-mixedbread-search data-translations={JSON.stringify(mixedbreadTranslations)}>
  <button type="button" class="mixedbread-search mixedbread-search-button" aria-label={Astro.locals.t("search.label")}>
    <span class="mixedbread-button-container">
      <svg width="20" height="20" class="mixedbread-search-icon" viewBox="0 0 20 20">
        <path
          d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z"
          stroke="currentColor"
          fill="none"
          fill-rule="evenodd"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg>
      <span class="mixedbread-button-placeholder">{Astro.locals.t("search.label")}</span>
    </span>
    <span class="mixedbread-button-keys"></span>
  </button>
</sl-mixedbread-search>

<style is:global>
  .mixedbread-search-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border: 0;
    background-color: transparent;
    color: var(--sl-color-gray-1);
    cursor: pointer;
    height: 2.5rem;
    font-size: var(--sl-text-xl);
  }

  .mixedbread-button-container {
    display: contents;
  }

  .mixedbread-search-icon {
    width: 0.875em;
    height: 0.875em;
    stroke-width: 0.125rem;
  }

  .mixedbread-button-placeholder,
  .mixedbread-button-keys {
    display: none;
  }

  @media (min-width: 50rem) {
    sl-mixedbread-search {
      width: 100%;
    }

    .mixedbread-search-button {
      border: 1px solid var(--sl-color-gray-5);
      border-radius: 0.375rem;
      padding-inline-start: 0.75rem;
      padding-inline-end: 1rem;
      background-color: var(--sl-color-black);
      color: var(--sl-color-gray-2);
      font-size: var(--sl-text-sm);
      width: 100%;
      max-width: 22rem;
      transition: all 0.15s ease;
    }

    .mixedbread-search-button:hover {
      border-color: var(--sl-color-gray-2);
      color: var(--sl-color-white);
      box-shadow: 0 0 0 1px var(--sl-color-gray-2);
    }

    .mixedbread-button-placeholder,
    .mixedbread-button-keys {
      display: flex;
      align-items: center;
    }

    .mixedbread-button-keys {
      margin-inline-start: auto;
      gap: 0.25rem;
      opacity: 0.7;
    }

    .mixedbread-button-keys::before {
      content: "âŒ˜K";
      font-size: 0.75rem;
      font-weight: 500;
    }

    body:not(.mac) .mixedbread-button-keys::before {
      content: "Ctrl K";
    }
  }

  body.mixedbread-modal-open {
    overflow: hidden;
  }

  .mixedbread-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    z-index: 9999;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding: 10vh 16px 16px;
    visibility: hidden;
    opacity: 0;
    transition:
      opacity 0.15s ease,
      visibility 0.15s ease;
  }

  .mixedbread-modal.is-open {
    visibility: visible;
    opacity: 1;
  }

  .mixedbread-modal-container {
    background: var(--sl-color-black);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04),
      0 0 0 1px rgba(255, 255, 255, 0.05);
    width: 100%;
    max-width: 640px;
    max-height: 600px;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    transform: translateY(-20px);
    transition: transform 0.15s ease;
  }

  .mixedbread-modal.is-open .mixedbread-modal-container {
    transform: translateY(0);
  }

  .mixedbread-searchbox {
    padding: 0;
    border-bottom: 1px solid var(--sl-color-gray-5);
    position: relative;
  }

  .mixedbread-searchbox::before {
    content: "";
    position: absolute;
    left: 16px;
    top: 50%;
    transform: translateY(-50%);
    width: 16px;
    height: 16px;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='none'%3E%3Cpath d='M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z' stroke='%236b7280' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E");
    background-size: contain;
    opacity: 0.5;
    pointer-events: none;
  }

  .mixedbread-searchbox input {
    width: 100%;
    padding: 14px 48px;
    border: none;
    background: transparent;
    font-size: 16px;
    color: var(--sl-color-white);
    outline: none;
    font-family: inherit;
  }

  /* Disable native search clear button */
  .mixedbread-searchbox input::-webkit-search-cancel-button,
  .mixedbread-searchbox input::-webkit-search-decoration,
  .mixedbread-searchbox input::-webkit-search-results-button,
  .mixedbread-searchbox input::-webkit-search-results-decoration {
    display: none;
  }

  .mixedbread-searchbox input::-ms-clear,
  .mixedbread-searchbox input::-ms-reveal {
    display: none;
  }

  .mixedbread-searchbox input::placeholder {
    color: var(--sl-color-gray-3);
  }

  .mixedbread-clear {
    position: absolute;
    right: 16px;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    padding: 0;
    border: none;
    background: none;
    color: var(--sl-color-gray-3);
    cursor: pointer;
    opacity: 0;
    transition:
      opacity 0.15s ease,
      color 0.15s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .mixedbread-clear.show {
    opacity: 1;
  }

  .mixedbread-clear:hover {
    color: var(--sl-color-gray-1);
  }

  .mixedbread-clear:focus {
    outline: 2px solid var(--sl-color-accent);
    outline-offset: 2px;
    border-radius: 4px;
  }

  .mixedbread-clear svg {
    width: 16px;
    height: 16px;
  }

  .mixedbread-results {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
    overscroll-behavior: contain;
  }

  /* Screen reader only text */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  .mixedbread-results::-webkit-scrollbar {
    width: 8px;
  }

  .mixedbread-results::-webkit-scrollbar-track {
    background: transparent;
  }

  .mixedbread-results::-webkit-scrollbar-thumb {
    background: var(--sl-color-gray-5);
    border-radius: 4px;
  }

  .mixedbread-results::-webkit-scrollbar-thumb:hover {
    background: var(--sl-color-gray-4);
  }

  .mixedbread-hit {
    padding: 12px 16px;
    border-radius: 0.375rem;
    margin-bottom: 8px;
    cursor: pointer;
    background: transparent;
    color: var(--sl-color-white);
    text-decoration: none;
    display: block;
    transition: all 0.1s ease;
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .mixedbread-hit:last-child {
    margin-bottom: 0px;
  }

  .mixedbread-hit:hover:not(.keyboard-nav .mixedbread-hit),
  .mixedbread-hit.selected {
    background: var(--sl-color-gray-6);
    border-color: var(--sl-color-gray-5);
  }

  .mixedbread-hit-title {
    font-weight: 600;
    margin-bottom: 4px;
    font-size: 14px;
    line-height: 1.4;
  }

  .mixedbread-hit-content {
    color: var(--sl-color-gray-2);
    font-size: 13px;
    line-height: 1.5;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  .mixedbread-footer {
    padding: 14px 16px;
    background: var(--sl-color-gray-7);
    border-top: 1px solid var(--sl-color-gray-5);
    display: flex;
    align-items: center;
    justify-content: flex-end;
    font-size: 12px;
    color: var(--sl-color-gray-3);
  }

  .mixedbread-shortcuts {
    display: flex;
    gap: 12px;
    align-items: center;
  }

  .mixedbread-key {
    background: var(--sl-color-gray-6);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.25rem;
    padding: 2px 6px;
    font-size: 11px;
    font-weight: 500;
    color: var(--sl-color-gray-1);
    min-width: 27px;
    text-align: center;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .mixedbread-no-results,
  .mixedbread-loading,
  .mixedbread-error,
  .mixedbread-empty {
    padding: 48px 24px;
    text-align: center;
    color: var(--sl-color-gray-3);
  }

  .mixedbread-empty {
    padding: 80px 24px;
  }

  .mixedbread-empty-icon {
    width: 48px;
    height: 48px;
    margin: 0 auto 16px;
    opacity: 0.3;
  }

  .mixedbread-empty-text {
    font-size: 14px;
    line-height: 1.6;
  }

  .mixedbread-empty-hint {
    margin-top: 8px;
    font-size: 13px;
    color: var(--sl-color-gray-4);
  }

  .mixedbread-loading::before {
    content: "";
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 2px solid var(--sl-color-gray-5);
    border-top-color: var(--sl-color-accent);
    border-radius: 50%;
    animation: mixedbread-spin 0.8s linear infinite;
    margin-bottom: 8px;
  }

  @keyframes mixedbread-spin {
    to {
      transform: rotate(360deg);
    }
  }

  .mixedbread-error {
    color: #ef4444;
  }

  @media (max-width: 640px) {
    .mixedbread-modal {
      padding: 0;
    }

    .mixedbread-modal-container {
      max-width: 100%;
      height: 100%;
      max-height: 100%;
      border-radius: 0;
      border: none;
    }

    .mixedbread-searchbox input {
      font-size: 16px; /* Prevents zoom on iOS */
    }
  }
</style>

<script>
  interface SearchResult {
    id: string
    title: string
    content: string
    url: string
    score: number
  }

  class StarlightMixedbreadSearch extends HTMLElement {
    private modal: HTMLElement | null = null
    private searchInput: HTMLInputElement | null = null
    private results: HTMLElement | null = null
    private clearButton: HTMLButtonElement | null = null
    private selectedIndex = -1
    private hoveredIndex = -1
    private currentResults: SearchResult[] = []
    private searchTimeout: number | null = null
    private abortController: AbortController | null = null
    private isKeyboardNavigating = false

    constructor() {
      super()
      this.init()
    }

    private init() {
      this.createModal()
      this.bindEvents()
    }

    private createModal() {
      this.modal = document.createElement("div")
      this.modal.className = "mixedbread-modal"
      this.modal.setAttribute("role", "dialog")
      this.modal.setAttribute("aria-modal", "true")
      this.modal.setAttribute("aria-label", "Search")

      this.modal.innerHTML = `
        <div class="mixedbread-modal-container" role="document">
          <div class="mixedbread-searchbox">
            <input 
              type="search" 
              placeholder="Search documentation..." 
              aria-label="Search documentation"
              aria-describedby="search-instructions"
              autocomplete="off"
              autocorrect="off"
              autocapitalize="off"
              spellcheck="false"
              maxlength="64"
            />
            <button class="mixedbread-clear" aria-label="Clear search" type="button" tabindex="-1">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
              </svg>
              <span class="sr-only">Clear</span>
            </button>
          </div>
          <div class="mixedbread-results" role="listbox" aria-label="Search results" aria-live="polite"></div>
          <div class="mixedbread-footer">
            <span id="search-instructions" class="sr-only">
              Type to search. Use arrow keys to navigate results. Press Enter to select. Press Escape to close.
            </span>
            <div class="mixedbread-shortcuts" aria-label="Keyboard shortcuts">
              <span class="mixedbread-key" aria-label="Up arrow">â†‘</span>
              <span class="mixedbread-key" aria-label="Down arrow">â†“</span>
              <span>to navigate</span>
              <span class="mixedbread-key" aria-label="Enter key">â†µ</span>
              <span>to select</span>
              <span class="mixedbread-key" aria-label="Escape key">esc</span>
              <span>to close</span>
            </div>
          </div>
        </div>
      `

      document.body.appendChild(this.modal)
      this.searchInput = this.modal.querySelector("input")
      this.results = this.modal.querySelector(".mixedbread-results")
      this.clearButton = this.modal.querySelector(".mixedbread-clear") as HTMLButtonElement
    }

    private bindEvents() {
      const button = this.querySelector("button")
      button?.addEventListener("click", () => this.openModal())

      document.addEventListener("keydown", (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key === "k") {
          e.preventDefault()
          this.openModal()
        }
      })

      if (navigator.platform.includes("Mac")) {
        document.body.classList.add("mac")
      }

      if (this.modal) {
        // Click outside to close
        this.modal.addEventListener("click", (e) => {
          if (e.target === this.modal) {
            this.closeModal()
          }
        })

        this.modal.addEventListener("keydown", (e) => {
          switch (e.key) {
            case "Escape":
              e.preventDefault()
              this.closeModal()
              break
            case "ArrowDown":
            case "ArrowUp":
              e.preventDefault()
              if (!this.isKeyboardNavigating) {
                this.isKeyboardNavigating = true
                if (this.selectedIndex === -1 && this.hoveredIndex >= 0) {
                  this.selectedIndex = this.hoveredIndex
                }
              }
              this.navigateResults(e.key === "ArrowDown" ? 1 : -1)
              break
            case "Enter":
              e.preventDefault()
              this.selectResult()
              break
          }
        })

        // Reset keyboard navigation on mouse movement
        this.modal.addEventListener("mousemove", () => {
          if (this.isKeyboardNavigating) {
            this.isKeyboardNavigating = false
            this.results?.classList.remove("keyboard-nav")
          }
        })
      }

      if (this.searchInput) {
        // Handle search input
        this.searchInput.addEventListener("input", (e) => {
          const query = (e.target as HTMLInputElement).value
          this.resetNavigationState()
          this.handleSearch(query)
          this.updateClearButton(query)
        })

        // Handle Tab key
        this.searchInput.addEventListener("keydown", (e) => {
          if (e.key === "Tab" && e.shiftKey) {
            e.preventDefault()
            this.closeModal()
          }
        })
      }

      if (this.clearButton) {
        // Clear button click
        this.clearButton.addEventListener("click", () => {
          this.clearSearch()
          this.searchInput?.focus()
        })

        // Clear button keyboard navigation
        this.clearButton.addEventListener("keydown", (e) => {
          if (e.key === "Tab") {
            e.preventDefault()
            if (e.shiftKey) {
              this.searchInput?.focus()
            } else if (this.currentResults.length > 0) {
              this.selectedIndex = 0
              this.renderResults()
              const firstResult = this.results?.querySelector('[data-index="0"]') as HTMLElement
              firstResult?.focus()
            } else {
              this.closeModal()
            }
          }
        })
      }
    }

    private openModal() {
      if (!this.modal) return

      document.body.classList.add("mixedbread-modal-open")
      this.modal.classList.add("is-open")

      // Focus input after modal animation
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          this.searchInput?.focus()
          this.showEmptyState()
        })
      })
    }

    private closeModal() {
      if (!this.modal) return

      document.body.classList.remove("mixedbread-modal-open")
      this.modal.classList.remove("is-open")
      this.clearSearch()
      this.abortController?.abort()
    }

    private clearSearch() {
      if (this.searchInput) {
        this.searchInput.value = ""
      }
      this.resetAllState()
      this.updateClearButton("")
      this.showEmptyState()
    }

    private resetNavigationState() {
      this.isKeyboardNavigating = false
      this.hoveredIndex = -1
      this.selectedIndex = -1
      this.results?.classList.remove("keyboard-nav")
    }

    private resetAllState() {
      this.currentResults = []
      this.resetNavigationState()
    }

    private async handleSearch(query: string) {
      this.abortController?.abort()

      if (this.searchTimeout) {
        clearTimeout(this.searchTimeout)
      }

      if (!query.trim()) {
        this.currentResults = []
        this.renderResults()
        return
      }

      this.searchTimeout = window.setTimeout(async () => {
        this.showLoading()

        try {
          this.abortController = new AbortController()

          const response = await fetch(`/api/search/?query=${encodeURIComponent(query)}`, {
            signal: this.abortController.signal
          })

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`)
          }

          const results = await response.json()

          if (results.error) {
            throw new Error(results.error)
          }

          this.currentResults = results
          this.selectedIndex = -1
          this.renderResults()
        } catch (error: any) {
          if (error.name !== "AbortError") {
            console.error("Search error:", error)
            this.showError()
          }
        }
      }, 200)
    }

    private showLoading() {
      if (this.results) {
        this.results.innerHTML = `
          <div class="mixedbread-loading" role="status">
            <div>Searching...</div>
            <span class="sr-only">Loading search results</span>
          </div>
        `
      }
    }

    private showError() {
      if (this.results) {
        this.results.innerHTML = `
          <div class="mixedbread-error" role="alert">
            Search failed. Please try again.
          </div>
        `
      }
    }

    private showEmptyState() {
      if (this.results) {
        this.results.innerHTML = `
          <div class="mixedbread-empty">
            <div class="mixedbread-empty-icon" aria-hidden="true">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <div class="mixedbread-empty-text">
              Start typing to search documentation
            </div>
            <div class="mixedbread-empty-hint">
              Search powered by Mixedbread
            </div>
          </div>
        `
      }
    }

    private renderResults() {
      if (!this.results) return

      if (this.currentResults.length === 0 && this.searchInput?.value) {
        this.results.innerHTML = `
          <div class="mixedbread-no-results" role="status">
            No results found for "${this.escapeHtml(this.searchInput.value)}"
          </div>
        `
        return
      }

      if (this.currentResults.length === 0) {
        this.showEmptyState()
        return
      }

      const resultsText =
        this.currentResults.length === 1 ? "1 result found" : `${this.currentResults.length} results found`

      this.results.innerHTML = `
        <div class="sr-only" role="status">${resultsText}</div>
        ${this.currentResults
          .map((result, index) => {
            const isSelected = index === this.selectedIndex
            return `
              <a 
                href="${result.url}/" 
                class="mixedbread-hit ${isSelected ? "selected" : ""}" 
                data-index="${index}"
                role="option"
                aria-selected="${isSelected}"
                aria-label="${this.escapeHtml(result.title)}. ${this.escapeHtml(result.content)}"
              >
                <div class="mixedbread-hit-title">${this.escapeHtml(result.title)}</div>
                <div class="mixedbread-hit-content">${this.escapeHtml(result.content)}</div>
              </a>
            `
          })
          .join("")}
      `

      // Maintain keyboard navigation class if active
      if (this.isKeyboardNavigating) {
        this.results.classList.add("keyboard-nav")
      }

      // Add event listeners to results
      this.results.querySelectorAll(".mixedbread-hit").forEach((hit) => {
        hit.addEventListener("click", () => this.closeModal())

        hit.addEventListener("mouseenter", (e) => {
          if (!this.isKeyboardNavigating) {
            const target = e.currentTarget as HTMLElement
            this.hoveredIndex = parseInt(target.getAttribute("data-index") || "-1")
            this.selectedIndex = -1
          }
        })

        hit.addEventListener("mouseleave", () => {
          if (!this.isKeyboardNavigating) {
            this.hoveredIndex = -1
          }
        })
      })
    }

    private navigateResults(direction: number) {
      if (this.currentResults.length === 0) return

      const previousIndex = this.selectedIndex

      // Calculate new index without wrapping
      if (direction > 0) {
        // Moving down
        if (this.selectedIndex === -1) {
          this.selectedIndex = 0
        } else if (this.selectedIndex < this.currentResults.length - 1) {
          this.selectedIndex = this.selectedIndex + 1
        }
      } else {
        // Moving up
        if (this.selectedIndex === -1) {
          this.selectedIndex = 0
        } else if (this.selectedIndex > 0) {
          this.selectedIndex = this.selectedIndex - 1
        }
      }

      if (previousIndex !== this.selectedIndex) {
        this.hoveredIndex = -1
        this.renderResults()

        if (this.selectedIndex >= 0) {
          const selectedElement = this.results?.querySelector(`[data-index="${this.selectedIndex}"]`) as HTMLElement
          selectedElement?.scrollIntoView({ block: "nearest", behavior: "smooth" })

          // Announce selection to screen readers
          const announcement = document.createElement("div")
          announcement.className = "sr-only"
          announcement.setAttribute("role", "status")
          announcement.setAttribute("aria-live", "polite")
          announcement.textContent = `${this.selectedIndex + 1} of ${this.currentResults.length}. ${selectedElement?.getAttribute("aria-label")}`
          this.results?.appendChild(announcement)
          setTimeout(() => announcement.remove(), 1000)
        }
      }
    }

    private selectResult() {
      if (this.selectedIndex >= 0 && this.currentResults[this.selectedIndex]) {
        const result = this.currentResults[this.selectedIndex]
        window.location.href = result.url
        this.closeModal()
      }
    }

    private updateClearButton(query: string) {
      if (this.clearButton) {
        if (query) {
          this.clearButton.classList.add("show")
          this.clearButton.removeAttribute("tabindex")
        } else {
          this.clearButton.classList.remove("show")
          this.clearButton.setAttribute("tabindex", "-1")
        }
      }
    }

    private escapeHtml(text: string): string {
      const div = document.createElement("div")
      div.textContent = text
      return div.innerHTML
    }
  }

  customElements.define("sl-mixedbread-search", StarlightMixedbreadSearch)
</script>
