1
01:00:00,083 --> 01:00:02,125
like the dependency injection,

2
01:00:02,125 --> 01:00:03,916
like dependency management as well.

3
01:00:04,208 --> 01:00:07,208
It's just so great with Effect.

4
01:00:07,416 --> 01:00:09,708
I feel like I'm much more

5
01:00:09,708 --> 01:00:11,000
incentivized to write unit

6
01:00:11,000 --> 01:00:13,583
tests and I don't know how other people

7
01:00:13,583 --> 01:00:16,750
think about engineers at companies like

8
01:00:16,750 --> 01:00:21,250
Zendesk and like Facebook and Google, like big companies

9
01:00:21,250 --> 01:00:22,000
like how they

10
01:00:22,000 --> 01:00:23,500
deal with these things

11
01:00:23,500 --> 01:00:24,750
on a day-to-day basis.

12
01:00:24,750 --> 01:00:26,208
In the end, like it doesn't matter

13
01:00:26,208 --> 01:00:29,208
how skillful or experienced you are.

14
01:00:29,208 --> 01:00:31,375
It comes down to incentives all the time.

15
01:00:31,375 --> 01:00:33,583
Like you do things that you

16
01:00:33,583 --> 01:00:35,458
are more incentivized to do.

17
01:00:35,458 --> 01:00:39,458
So, If a language or a framework or a library

18
01:00:39,458 --> 01:00:42,083
makes something really easy to do,

19
01:00:42,291 --> 01:00:44,500
you will do it regardless, whether it's

20
01:00:44,500 --> 01:00:45,500
the right thing to do

21
01:00:45,500 --> 01:00:46,500
or the wrong thing to do.

22
01:00:49,541 --> 01:00:52,375
Welcome to "Cause & Effect," a podcast

23
01:00:52,375 --> 01:00:53,875
about Effect, the TypeScript library,

24
01:00:53,875 --> 01:00:56,458
and ecosystem helping engineers build

25
01:00:56,458 --> 01:00:57,583
production-ready software.

26
01:00:58,750 --> 01:01:00,916
I'm your host, Johannes Schickling, and I've

27
01:01:00,916 --> 01:01:01,583
been building with

28
01:01:01,583 --> 01:01:03,083
Effect for over four years.

29
01:01:03,750 --> 01:01:05,875
With this podcast, I want to help others

30
01:01:05,875 --> 01:01:07,083
understand the benefits

31
01:01:07,250 --> 01:01:08,791
and powers of using Effect.

32
01:01:09,916 --> 01:01:11,750
In this episode, I'm talking to Attila

33
01:01:11,750 --> 01:01:14,041
Večerek, a tech lead at Zendesk

34
01:01:14,291 --> 01:01:15,583
and long-term user of Effect.

35
01:01:16,166 --> 01:01:18,083
In this conversation, we talk about the

36
01:01:18,083 --> 01:01:19,791
challenges of building production-grade

37
01:01:19,791 --> 01:01:20,791
software in TypeScript

38
01:01:21,250 --> 01:01:23,791
and how Zendesk ended up adopting Effect

39
01:01:23,791 --> 01:01:25,541
in one of their main products,

40
01:01:25,541 --> 01:01:27,500
serving millions of users every day.

41
01:01:28,333 --> 01:01:29,291
Let's get into it.

42
01:01:29,875 --> 01:01:32,166
Welcome Attila to the very first episode

43
01:01:32,166 --> 01:01:33,875
of the Cause & Effect Podcast.

44
01:01:34,291 --> 01:01:34,666
How are you doing?

45
01:01:36,541 --> 01:01:37,000
Thank you.

46
01:01:37,000 --> 01:01:37,583
Thank you, Johannes.

47
01:01:37,750 --> 01:01:38,958
I'm so happy to be here.

48
01:01:39,416 --> 01:01:40,333
Uh, I'm doing pretty well.

49
01:01:40,625 --> 01:01:41,041
Thank you.

50
01:01:41,041 --> 01:01:41,625
How about you?

51
01:01:42,041 --> 01:01:43,041
I'm doing fantastic.

52
01:01:43,416 --> 01:01:45,291
Really looking forward to doing

53
01:01:45,291 --> 01:01:46,833
this podcast and to

54
01:01:46,833 --> 01:01:47,791
do it together with you

55
01:01:47,833 --> 01:01:49,333
since I think we've been in

56
01:01:49,333 --> 01:01:50,625
touch now for quite a while.

57
01:01:50,625 --> 01:01:53,041
We met like half a year ago, also

58
01:01:53,041 --> 01:01:55,875
for the first time in person at the

59
01:01:55,875 --> 01:01:57,541
first Effect Conference in Vienna.

60
01:01:58,333 --> 01:02:00,458
And yeah, really excited to do this

61
01:02:00,458 --> 01:02:02,125
together and share more

62
01:02:02,125 --> 01:02:03,916
your story of like

63
01:02:03,916 --> 01:02:05,500
discovering Effect and using Effect.

64
01:02:05,958 --> 01:02:08,875
So you're using Effect at Zendesk, but

65
01:02:08,875 --> 01:02:10,541
would you mind giving a quick

66
01:02:10,583 --> 01:02:13,166
introduction of who you are?

67
01:02:13,375 --> 01:02:14,916
What is your role at Zendesk?

68
01:02:14,916 --> 01:02:15,875
What have you done before?

69
01:02:16,375 --> 01:02:17,666
And then we can dive deeper.

70
01:02:19,000 --> 01:02:19,333
Sure thing.

71
01:02:19,583 --> 01:02:20,125
Hey everyone.

72
01:02:20,291 --> 01:02:22,750
My name is Attila, Attila Večerek and

73
01:02:22,750 --> 01:02:25,041
I've been at Zendesk

74
01:02:25,041 --> 01:02:26,708
for almost seven years.

75
01:02:26,708 --> 01:02:27,708
It's going to be seven years

76
01:02:27,708 --> 01:02:29,375
exactly this year in October.

77
01:02:29,625 --> 01:02:32,375
Currently I'm a tech lead at a

78
01:02:32,375 --> 01:02:35,500
team in the Guide organization, which

79
01:02:35,875 --> 01:02:38,416
is responsible for the

80
01:02:38,416 --> 01:02:40,916
help center part of Zendesk.

81
01:02:41,333 --> 01:02:43,916
So, if you see any help center

82
01:02:43,916 --> 01:02:45,750
articles or community

83
01:02:45,750 --> 01:02:47,000
and stuff like that,

84
01:02:47,000 --> 01:02:47,916
that's, that's what I do.

85
01:02:48,541 --> 01:02:51,125
And most recently I also got the

86
01:02:51,125 --> 01:02:53,208
responsibility of re-vamping

87
01:02:53,625 --> 01:02:55,500
our customer satisfaction feature.

88
01:02:55,708 --> 01:02:57,583
which is one of our most used

89
01:02:57,583 --> 01:02:59,875
features besides like the core product,

90
01:02:59,875 --> 01:03:01,000
which is ticketing itself.

91
01:03:01,291 --> 01:03:03,083
And yeah, I'm very excited about that.

92
01:03:03,458 --> 01:03:05,666
And that's actually the feature

93
01:03:05,666 --> 01:03:07,833
which is built using Effect.

94
01:03:08,041 --> 01:03:08,833
That sounds awesome.

95
01:03:09,000 --> 01:03:09,250
Yeah.

96
01:03:09,250 --> 01:03:11,500
I'm excited to hear more about that and

97
01:03:11,500 --> 01:03:13,333
go in depth, but would you

98
01:03:13,375 --> 01:03:15,250
mind describing a bit more of, given

99
01:03:15,250 --> 01:03:17,375
that, there are, I think,

100
01:03:17,375 --> 01:03:19,958
several thousands of engineers at Zendesk

101
01:03:19,958 --> 01:03:22,666
and not all code there is written

102
01:03:22,916 --> 01:03:24,708
with Effect, that might change at

103
01:03:24,708 --> 01:03:27,166
some point, but would you mind giving

104
01:03:27,166 --> 01:03:30,458
a quick overview of, what it means to

105
01:03:30,458 --> 01:03:31,625
be an engineer at Zendesk?

106
01:03:31,875 --> 01:03:34,166
So Zendesk is really large, we

107
01:03:34,166 --> 01:03:37,291
have many sub orgs and, or

108
01:03:37,291 --> 01:03:40,208
departments and each of them, even at the

109
01:03:40,208 --> 01:03:41,708
team level, like there are huge

110
01:03:41,833 --> 01:03:44,666
differences, we're truly a polyglot

111
01:03:44,666 --> 01:03:46,333
company when it comes to languages

112
01:03:46,583 --> 01:03:47,875
and different kinds of tech stacks.

113
01:03:48,583 --> 01:03:51,333
I still think most of our code is

114
01:03:51,333 --> 01:03:52,708
still written in Ruby.

115
01:03:53,416 --> 01:03:54,875
The company started with

116
01:03:54,875 --> 01:03:56,833
Ruby and Ruby on Rails specifically.

117
01:03:57,541 --> 01:04:00,208
We have two large Ruby monoliths.

118
01:04:00,208 --> 01:04:01,250
both of them I have to

119
01:04:01,250 --> 01:04:02,750
interact with from time to time.

120
01:04:03,083 --> 01:04:03,958
That's, that's always

121
01:04:03,958 --> 01:04:05,000
an interesting

122
01:04:05,000 --> 01:04:06,208
experience, especially

123
01:04:06,375 --> 01:04:08,541
when you've been working with Effect

124
01:04:08,541 --> 01:04:10,250
for a while and then you have to go back

125
01:04:10,250 --> 01:04:12,000
to Ruby and like, Oh, okay.

126
01:04:12,791 --> 01:04:13,958
Things are a little bit different here.

127
01:04:14,500 --> 01:04:16,791
But besides Ruby, there's also like a

128
01:04:16,791 --> 01:04:20,166
ton of Java, some Scala, some

129
01:04:20,166 --> 01:04:22,125
Golang, yeah, and obviously

130
01:04:22,125 --> 01:04:23,416
TypeScript mostly for

131
01:04:23,416 --> 01:04:24,875
front-end, but, we

132
01:04:24,875 --> 01:04:27,041
have also some companies that we acquired

133
01:04:27,041 --> 01:04:28,875
who brought in a lot

134
01:04:28,875 --> 01:04:30,041
of backend TypeScript.

135
01:04:30,791 --> 01:04:32,916
And yeah, we have some, some of the

136
01:04:32,916 --> 01:04:33,958
TypeScript on the

137
01:04:33,958 --> 01:04:35,333
backend in Guide as well.

138
01:04:36,166 --> 01:04:39,041
So it sounds like Ruby has always

139
01:04:39,041 --> 01:04:41,666
been the majority of code and still is.

140
01:04:42,166 --> 01:04:43,791
Is there any technology, any

141
01:04:43,791 --> 01:04:45,708
language that you feel like is really,

142
01:04:46,291 --> 01:04:49,125
on its way in and might replace Ruby

143
01:04:49,125 --> 01:04:49,708
as the primary

144
01:04:49,708 --> 01:04:51,166
language maybe at some point?

145
01:04:51,708 --> 01:04:52,750
That's really hard to tell.

146
01:04:52,750 --> 01:04:55,750
I don't think Ruby will go away ever.

147
01:04:56,000 --> 01:04:59,583
These huge monoliths, they're here to

148
01:04:59,583 --> 01:05:00,958
stay with us for

149
01:05:00,958 --> 01:05:02,916
until Zendesk will exist.

150
01:05:02,916 --> 01:05:04,083
I'm pretty sure of that.

151
01:05:04,083 --> 01:05:07,291
We had some initial thoughts of breaking

152
01:05:07,291 --> 01:05:09,291
the monoliths down, but it's really

153
01:05:09,333 --> 01:05:11,708
hard to justify these efforts, when

154
01:05:11,708 --> 01:05:14,000
it comes to product and, and like the

155
01:05:14,291 --> 01:05:16,500
business needs of the company.

156
01:05:16,958 --> 01:05:19,083
So for all the startups out there,

157
01:05:19,083 --> 01:05:20,875
like if you start with a technology

158
01:05:21,041 --> 01:05:23,833
and you become like large company and

159
01:05:23,833 --> 01:05:26,083
really largely successful, all the

160
01:05:26,083 --> 01:05:28,166
tech that, that you accumulate for all

161
01:05:28,166 --> 01:05:29,916
those years, that's going to probably

162
01:05:29,958 --> 01:05:31,333
stay there for, for a while.

163
01:05:31,500 --> 01:05:34,375
So yeah, maybe, maybe think about twice

164
01:05:34,375 --> 01:05:35,541
about what you start with.

165
01:05:36,000 --> 01:05:38,333
Not all this tiny decisions, but like the

166
01:05:38,333 --> 01:05:39,791
major ones, it's, it's good

167
01:05:39,791 --> 01:05:41,333
to put some thought into it.

168
01:05:41,875 --> 01:05:42,583
Oh yeah, for sure.

169
01:05:42,958 --> 01:05:45,750
But I mean, Zendesk is a very,

170
01:05:45,750 --> 01:05:48,291
profitable and very great company.

171
01:05:48,291 --> 01:05:49,625
So I suppose it wasn't

172
01:05:49,625 --> 01:05:51,583
the worst stack decision.

173
01:05:51,750 --> 01:05:53,500
If it led Zendesk to this point

174
01:05:53,500 --> 01:05:57,125
today and given that you, are also

175
01:05:57,125 --> 01:06:00,000
now leaning more into TypeScript, I think

176
01:06:00,000 --> 01:06:02,125
there there's, you can probably use the

177
01:06:02,125 --> 01:06:04,791
best tools for the appropriate jobs.

178
01:06:05,333 --> 01:06:07,541
But speaking of TypeScript, I think this

179
01:06:07,541 --> 01:06:10,083
is one example of like a theme

180
01:06:10,083 --> 01:06:12,541
that I'm noticing, which is that you seem

181
01:06:12,541 --> 01:06:15,083
to challenge the status quo a bit.

182
01:06:15,333 --> 01:06:16,291
when it comes to engineering

183
01:06:16,291 --> 01:06:19,041
within Zendesk where you see, okay,

184
01:06:19,041 --> 01:06:20,250
this is how things are done.

185
01:06:20,708 --> 01:06:23,541
And then, you seem to, send some

186
01:06:23,541 --> 01:06:26,250
ways to do things possibly better.

187
01:06:26,250 --> 01:06:28,666
And this is, I think we're using some

188
01:06:28,666 --> 01:06:29,666
colleagues, if I understood

189
01:06:29,875 --> 01:06:32,416
correctly have, at some point looked

190
01:06:32,416 --> 01:06:34,041
at TypeScript and said, actually,

191
01:06:34,041 --> 01:06:36,000
this is a bet worth making.

192
01:06:36,000 --> 01:06:37,000
Can you share that anecdote?

193
01:06:37,583 --> 01:06:38,166
Yeah, sure thing.

194
01:06:38,500 --> 01:06:41,458
So maybe just to understand for maybe

195
01:06:41,458 --> 01:06:42,500
people who are not familiar

196
01:06:42,500 --> 01:06:44,916
with Ruby on Rails, Ruby is a

197
01:06:44,958 --> 01:06:46,208
dynamic programming language.

198
01:06:46,416 --> 01:06:49,583
It's great for really one

199
01:06:49,583 --> 01:06:53,416
engineer or tiny teams that know the code

200
01:06:53,458 --> 01:06:55,291
base by heart, it makes

201
01:06:55,291 --> 01:06:56,333
them really efficient.

202
01:06:56,750 --> 01:06:57,833
So productivity wise,

203
01:06:57,833 --> 01:06:59,000
it's, it's terrific.

204
01:06:59,375 --> 01:07:01,541
So starting with Ruby for Zendesk was

205
01:07:01,541 --> 01:07:02,708
definitely a good bet.

206
01:07:03,125 --> 01:07:05,750
It allowed them to have like a

207
01:07:05,750 --> 01:07:07,333
velocity in the beginning that was

208
01:07:07,416 --> 01:07:10,083
absolutely crucial to become successful.

209
01:07:10,458 --> 01:07:13,250
But you know, working with a dynamic

210
01:07:13,250 --> 01:07:16,500
type language, especially like

211
01:07:16,500 --> 01:07:19,416
with a heavy OOP focus where you have

212
01:07:19,416 --> 01:07:21,500
lots of like design patterns.

213
01:07:22,041 --> 01:07:24,708
I'm not sure if you have worked with

214
01:07:24,708 --> 01:07:26,750
teams where people would argue

215
01:07:26,750 --> 01:07:28,833
like, Oh, you know what, for this

216
01:07:28,833 --> 01:07:29,750
feature, we should

217
01:07:29,750 --> 01:07:31,166
use this design pattern.

218
01:07:31,708 --> 01:07:33,625
And then the other side would be arguing,

219
01:07:33,625 --> 01:07:34,958
no, no, no, uh, look at,

220
01:07:35,208 --> 01:07:36,291
switch your mentality.

221
01:07:36,750 --> 01:07:38,208
Like, you have to look at the problem

222
01:07:38,208 --> 01:07:39,958
this way and then they

223
01:07:39,958 --> 01:07:41,458
bring up adapters and whatnot.

224
01:07:41,625 --> 01:07:43,583
And DDD and all these things.

225
01:07:43,583 --> 01:07:46,458
At a certain scale, it becomes fighting

226
01:07:46,458 --> 01:07:49,625
an uphill battle all the time because you

227
01:07:49,625 --> 01:07:51,916
have to be fully aligned with all

228
01:07:51,958 --> 01:07:54,250
the people who work on the code base.

229
01:07:54,250 --> 01:07:56,083
You have to agree on these things.

230
01:07:56,083 --> 01:07:57,041
Like what are the design

231
01:07:57,041 --> 01:07:58,250
patterns that we are introducing?

232
01:07:58,958 --> 01:07:59,166
Okay.

233
01:07:59,416 --> 01:08:00,375
Are we shifting to a

234
01:08:00,375 --> 01:08:01,250
different design pattern?

235
01:08:01,625 --> 01:08:02,666
Are we re-architecting

236
01:08:02,666 --> 01:08:04,416
redesigning our modules?

237
01:08:04,791 --> 01:08:06,583
Are we taking out and

238
01:08:06,583 --> 01:08:08,375
extracting reusable modules?

239
01:08:08,375 --> 01:08:09,583
And how do we do that?

240
01:08:10,000 --> 01:08:12,083
Are we doing some, you know, some

241
01:08:12,083 --> 01:08:14,375
module boundaries within rails and

242
01:08:14,375 --> 01:08:16,750
use rails engines or some other ways of

243
01:08:16,750 --> 01:08:18,125
enforcing these module boundaries?

244
01:08:18,500 --> 01:08:20,583
So all of these decisions, like you

245
01:08:20,583 --> 01:08:23,291
really have to pull the same rope in the

246
01:08:23,291 --> 01:08:24,708
same direction and then it's good.

247
01:08:25,166 --> 01:08:27,250
But at some point, now let's say you have

248
01:08:27,250 --> 01:08:28,875
this huge monolith, which we have,

249
01:08:29,166 --> 01:08:31,958
and you have 50 people or even hundreds

250
01:08:31,958 --> 01:08:32,916
and thousands of

251
01:08:32,916 --> 01:08:34,250
people contributing to it.

252
01:08:34,416 --> 01:08:36,708
Having this alignment across the

253
01:08:36,708 --> 01:08:38,958
entire organization is really hard.

254
01:08:39,333 --> 01:08:42,791
So what you end up having is a mixed bag

255
01:08:42,791 --> 01:08:44,833
of things and, you know, parts of

256
01:08:44,875 --> 01:08:47,875
the repo, use one design better.

257
01:08:47,875 --> 01:08:49,708
Another part uses another one.

258
01:08:49,708 --> 01:08:51,416
And then there's this new design better

259
01:08:51,416 --> 01:08:52,958
that you're pushing for some

260
01:08:52,958 --> 01:08:54,208
modularization and

261
01:08:54,208 --> 01:08:55,833
then that's a migration.

262
01:08:56,125 --> 01:08:58,208
And then there's tons of migrations going

263
01:08:58,208 --> 01:09:02,125
on at all time, like five, 10, 15

264
01:09:02,250 --> 01:09:03,041
different types of

265
01:09:03,041 --> 01:09:04,125
migrations in a code base.

266
01:09:04,458 --> 01:09:06,750
And then let's say you're a contributor

267
01:09:06,750 --> 01:09:09,541
who just wants to implement like a tiny

268
01:09:09,666 --> 01:09:11,875
bit of a feature, which is necessary in

269
01:09:11,875 --> 01:09:15,125
that repo so that the other service can

270
01:09:15,125 --> 01:09:16,166
communicate with it.

271
01:09:16,375 --> 01:09:16,708
I don't know.

272
01:09:16,708 --> 01:09:18,166
You, let's say you want to emit some

273
01:09:18,166 --> 01:09:19,000
events from

274
01:09:19,000 --> 01:09:21,625
the main monolith and then over

275
01:09:21,625 --> 01:09:24,833
Kafka or over whatever message bus so

276
01:09:24,833 --> 01:09:25,916
that you can consume

277
01:09:25,916 --> 01:09:28,083
those events in your microservice.

278
01:09:28,250 --> 01:09:30,625
Well, suddenly you'll see five or six

279
01:09:30,625 --> 01:09:32,541
different examples of how to emit

280
01:09:32,583 --> 01:09:34,416
domain events, or Kafka.

281
01:09:34,791 --> 01:09:36,125
So what do you do then?

282
01:09:36,458 --> 01:09:39,750
How do you find the people, that know

283
01:09:39,750 --> 01:09:42,500
what's the current status quo, or

284
01:09:42,500 --> 01:09:45,166
will you just blindly pick the one that

285
01:09:45,166 --> 01:09:46,166
is the most prominent?

286
01:09:46,583 --> 01:09:48,541
I mean, that's, there's no problem going

287
01:09:48,541 --> 01:09:51,000
with that route either, because if it's

288
01:09:51,000 --> 01:09:53,166
the most prominent thing and let's say

289
01:09:53,166 --> 01:09:53,708
it's something that

290
01:09:53,708 --> 01:09:54,750
we're moving away from.

291
01:09:55,125 --> 01:09:57,333
You can just commit to that and it will

292
01:09:57,333 --> 01:09:58,875
be moved away from with the rest.

293
01:09:59,333 --> 01:10:01,333
But then, you know, if you pick something

294
01:10:01,333 --> 01:10:03,791
in between, then that also brings the

295
01:10:03,791 --> 01:10:05,666
risks that the people who are doing that

296
01:10:05,666 --> 01:10:07,708
migration will just

297
01:10:07,708 --> 01:10:08,875
have bigger and bigger

298
01:10:08,875 --> 01:10:10,958
headaches because now they need to

299
01:10:10,958 --> 01:10:13,208
migrate different kinds of ways of doing

300
01:10:13,208 --> 01:10:14,125
things into this one,

301
01:10:14,125 --> 01:10:15,166
one way of doing thing.

302
01:10:15,291 --> 01:10:17,458
so these are the biggest problems

303
01:10:17,458 --> 01:10:20,625
that I see with Ruby, alignment,

304
01:10:20,708 --> 01:10:22,291
constantly fighting an uphill battle.

305
01:10:23,083 --> 01:10:25,250
You introduce a new feature, but at the

306
01:10:25,250 --> 01:10:27,125
same time you introduce a bug because

307
01:10:27,291 --> 01:10:29,541
you miss something and there's constant

308
01:10:29,541 --> 01:10:30,875
action at the distance.

309
01:10:30,875 --> 01:10:32,583
You change one part of the application,

310
01:10:33,125 --> 01:10:33,791
which has some

311
01:10:33,791 --> 01:10:35,125
unforeseen or unpredictable

312
01:10:35,583 --> 01:10:37,041
effects on another part of the

313
01:10:37,041 --> 01:10:39,250
application because

314
01:10:39,250 --> 01:10:41,208
everything is reusing everything.

315
01:10:41,750 --> 01:10:42,750
That makes a lot of sense.

316
01:10:42,750 --> 01:10:45,041
So it rather sounds like you're,

317
01:10:45,041 --> 01:10:47,583
you're running into some like social

318
01:10:47,833 --> 01:10:50,208
alignment issues where you just have so

319
01:10:50,208 --> 01:10:52,833
many engineers, like an all probably very

320
01:10:52,916 --> 01:10:54,541
brilliant and with like the best

321
01:10:54,541 --> 01:10:57,166
intentions trying to design it with their

322
01:10:57,208 --> 01:10:58,583
understanding of the world.

323
01:10:58,583 --> 01:11:00,166
But if you have thousands of engineers,

324
01:11:00,750 --> 01:11:03,958
this can lead to some, some very wild

325
01:11:04,083 --> 01:11:06,916
different directions and to enforce that

326
01:11:06,916 --> 01:11:08,458
alignment, I think if

327
01:11:08,458 --> 01:11:09,375
you're, if you don't

328
01:11:09,500 --> 01:11:11,791
have a types type system at your

329
01:11:11,791 --> 01:11:13,125
disposal to help with

330
01:11:13,125 --> 01:11:15,250
that, to be even aware of

331
01:11:15,250 --> 01:11:17,083
like, Hey, here's like some divergence.

332
01:11:17,708 --> 01:11:19,541
We're unopigniated maybe, or we

333
01:11:19,541 --> 01:11:21,958
tolerate both, but even to have some

334
01:11:21,958 --> 01:11:23,666
visibility into this and

335
01:11:23,666 --> 01:11:25,333
help drive the alignment.

336
01:11:25,708 --> 01:11:27,208
I think this is where a

337
01:11:27,208 --> 01:11:28,666
type system can help a lot.

338
01:11:28,666 --> 01:11:30,916
And I suppose that is what's what has

339
01:11:30,916 --> 01:11:32,458
made you so interested in TypeScript.

340
01:11:33,916 --> 01:11:34,708
Yes, absolutely.

341
01:11:35,000 --> 01:11:36,750
So that, that was one of the biggest

342
01:11:36,750 --> 01:11:38,875
driving forces behind the

343
01:11:38,875 --> 01:11:40,333
adoption of some language

344
01:11:40,333 --> 01:11:42,166
that is statically typed.

345
01:11:42,375 --> 01:11:43,041
it has tons of

346
01:11:43,041 --> 01:11:44,875
benefits, not just like this alignment.

347
01:11:45,125 --> 01:11:47,375
Very recently, I just actually had to

348
01:11:47,375 --> 01:11:49,833
go into one of these large Ruby

349
01:11:49,833 --> 01:11:52,791
monoliths and there's a feature flag

350
01:11:52,791 --> 01:11:54,708
that I introduced and some different

351
01:11:54,791 --> 01:11:56,916
behavior for when the feature flag

352
01:11:56,916 --> 01:11:59,916
is enabled and now this feature flag has

353
01:11:59,916 --> 01:12:00,875
been rolled out fully

354
01:12:00,875 --> 01:12:02,750
for, for some months now.

355
01:12:03,125 --> 01:12:06,583
So I was looking into removing the,

356
01:12:06,583 --> 01:12:09,416
if.else branch for the feature flag

357
01:12:09,416 --> 01:12:12,291
to keep only the logic that's basically

358
01:12:12,291 --> 01:12:14,791
used now that it's fully rolled

359
01:12:14,791 --> 01:12:17,708
out and by removing that one line of

360
01:12:17,708 --> 01:12:19,375
code, I broke like

361
01:12:19,375 --> 01:12:20,583
hundreds of unit tests.

362
01:12:21,083 --> 01:12:24,500
Because the unit tests had no idea that

363
01:12:24,500 --> 01:12:28,083
there was like a dependency on some HTTP

364
01:12:28,208 --> 01:12:30,041
call somewhere down the line.

365
01:12:30,291 --> 01:12:32,750
So now I have to find like a place where

366
01:12:32,750 --> 01:12:37,125
I can maybe permanently mock this call to

367
01:12:37,125 --> 01:12:39,708
a specific endpoint for all the

368
01:12:39,708 --> 01:12:41,291
tests forever, because I

369
01:12:41,291 --> 01:12:42,666
cannot pinpoint like the

370
01:12:42,875 --> 01:12:44,333
hundreds of different places

371
01:12:44,333 --> 01:12:46,125
where this is exactly called.

372
01:12:46,583 --> 01:12:47,458
So I have to mock it

373
01:12:47,458 --> 01:12:48,500
like on a general level.

374
01:12:49,000 --> 01:12:51,125
So, so these are also kinds of issues

375
01:12:51,125 --> 01:12:52,375
that you bump into

376
01:12:52,375 --> 01:12:54,291
and using languages and

377
01:12:54,291 --> 01:12:56,166
frameworks like this which is going

378
01:12:56,166 --> 01:12:58,375
to be another segway into Effect, I guess,

379
01:12:58,416 --> 01:13:00,291
later on with the

380
01:13:00,291 --> 01:13:01,333
dependency injection.

381
01:13:01,875 --> 01:13:02,875
Yeah, most certainly.

382
01:13:03,208 --> 01:13:05,291
So it sounds like you're building

383
01:13:05,291 --> 01:13:09,541
production grade software at scale at

384
01:13:09,583 --> 01:13:12,000
Zendesk in many different flavors,

385
01:13:12,000 --> 01:13:14,666
many different technologies, but at some

386
01:13:14,666 --> 01:13:17,250
point you've introduced TypeScript and

387
01:13:17,250 --> 01:13:19,375
that's the foundation for the services

388
01:13:19,541 --> 01:13:20,708
and products you're building.

389
01:13:21,083 --> 01:13:23,708
What was that that journey like?

390
01:13:24,291 --> 01:13:26,750
So you now have a type system to help

391
01:13:26,750 --> 01:13:29,500
with many things, but I suppose it still

392
01:13:29,541 --> 01:13:32,250
has not given you the silver bullet that

393
01:13:32,250 --> 01:13:34,791
makes it super easy to build production

394
01:13:34,791 --> 01:13:35,500
grade software.

395
01:13:36,291 --> 01:13:38,291
So what are some of the challenges you

396
01:13:38,291 --> 01:13:40,541
were still facing and possibly still

397
01:13:40,541 --> 01:13:41,916
face today and were

398
01:13:41,916 --> 01:13:42,875
you reaching for Effect?

399
01:13:43,375 --> 01:13:45,333
So if I have to reflect back on the

400
01:13:45,333 --> 01:13:47,000
time when we were introducing TypeScript

401
01:13:47,000 --> 01:13:49,833
at guide for the first time, I think

402
01:13:49,833 --> 01:13:51,833
obviously what we wanted to avoid where

403
01:13:51,833 --> 01:13:53,750
all of these problems that come with, uh,

404
01:13:53,750 --> 01:13:56,583
shared monoliths. We just wanted some

405
01:13:56,583 --> 01:13:58,666
some service, which is nicely isolated

406
01:13:58,666 --> 01:14:00,625
and we have our own

407
01:14:00,625 --> 01:14:02,375
deployment schedule, which

408
01:14:02,375 --> 01:14:03,375
is basically on demand.

409
01:14:03,875 --> 01:14:05,833
We don't need to deploy it on a

410
01:14:05,833 --> 01:14:08,083
weekly or biweekly cycles.

411
01:14:08,083 --> 01:14:09,416
And then of course the maintenance,

412
01:14:09,416 --> 01:14:10,375
improvements,

413
01:14:10,375 --> 01:14:11,791
because now you have a type

414
01:14:11,833 --> 01:14:13,625
system, so if you make a change in one

415
01:14:13,625 --> 01:14:15,458
place, the compiler

416
01:14:15,458 --> 01:14:18,250
will aid you in updating

417
01:14:18,333 --> 01:14:20,083
all the other call sites.

418
01:14:20,375 --> 01:14:21,125
So that, that was

419
01:14:21,125 --> 01:14:22,166
obviously one thing.

420
01:14:22,333 --> 01:14:25,375
But we also wanted to make sure that

421
01:14:25,375 --> 01:14:27,541
we don't get into these like reliability

422
01:14:27,708 --> 01:14:29,458
issues that we were having with the box.

423
01:14:29,750 --> 01:14:31,416
So like type safety was

424
01:14:31,416 --> 01:14:33,166
really important for us.

425
01:14:33,791 --> 01:14:36,625
Then we're looking into how to, because

426
01:14:36,625 --> 01:14:38,208
there are many different ways how you can

427
01:14:38,208 --> 01:14:39,250
write TypeScript, right?

428
01:14:39,250 --> 01:14:40,125
Like you can be really

429
01:14:40,125 --> 01:14:41,666
lenient and allow any.

430
01:14:41,750 --> 01:14:42,041
Right.

431
01:14:42,833 --> 01:14:45,041
You can typecast here and there.

432
01:14:45,166 --> 01:14:47,625
The language is quite flexible.

433
01:14:47,625 --> 01:14:49,833
You can use as much type safety as

434
01:14:49,833 --> 01:14:51,333
you want, or you can

435
01:14:51,333 --> 01:14:52,500
go towards the other end

436
01:14:52,500 --> 01:14:55,583
of the spectrum and use like the most

437
01:14:55,583 --> 01:14:57,666
brutal compiler

438
01:14:57,666 --> 01:14:59,375
options that are out there

439
01:14:59,666 --> 01:15:02,125
and make it super, super type safe.

440
01:15:02,375 --> 01:15:04,041
And then you even start thinking about,

441
01:15:04,041 --> 01:15:04,833
okay, how do we do

442
01:15:04,833 --> 01:15:06,250
end to end type safety?

443
01:15:06,291 --> 01:15:06,666
Right.

444
01:15:06,666 --> 01:15:08,666
Because there are certain things that

445
01:15:08,666 --> 01:15:10,083
come out of your system.

446
01:15:10,500 --> 01:15:12,666
Like on these boundaries of your system,

447
01:15:12,666 --> 01:15:14,708
you have a HTTP request coming in.

448
01:15:15,375 --> 01:15:16,958
Maybe HTTP request going out.

449
01:15:17,791 --> 01:15:19,000
Kafka message coming in.

450
01:15:19,583 --> 01:15:22,333
Like you need to parse these and at

451
01:15:22,333 --> 01:15:26,416
the inbound of your system, you have to

452
01:15:26,416 --> 01:15:27,875
be able to work with

453
01:15:27,875 --> 01:15:29,500
it with a static type.

454
01:15:29,500 --> 01:15:29,750
Right.

455
01:15:30,291 --> 01:15:32,541
So, so how do you do all of these things?

456
01:15:32,583 --> 01:15:34,750
Rolling it manually is really tedious

457
01:15:34,750 --> 01:15:38,083
with all the type checks at runtime.

458
01:15:38,416 --> 01:15:39,708
Especially if you have like really

459
01:15:39,708 --> 01:15:41,583
complex objects it

460
01:15:41,583 --> 01:15:42,958
is really hard to do that.

461
01:15:43,208 --> 01:15:45,333
So obviously you can compose like start

462
01:15:45,333 --> 01:15:46,333
at the leaves and then

463
01:15:46,333 --> 01:15:47,500
build up all of these,

464
01:15:47,500 --> 01:15:48,708
but that's a lot of work.

465
01:15:48,916 --> 01:15:51,541
So we started looking into other,

466
01:15:51,541 --> 01:15:54,041
like maybe even, even other programming

467
01:15:54,291 --> 01:15:56,833
paradigms like with, with Ruby, like of

468
01:15:56,833 --> 01:15:57,750
course there's like a

469
01:15:57,750 --> 01:15:59,583
ton of OOP stuff, but

470
01:15:59,583 --> 01:16:01,500
then with TypeScript, we were realizing,

471
01:16:01,500 --> 01:16:03,916
oh, okay, maybe we can actually leverage

472
01:16:04,166 --> 01:16:05,708
like, some functional programming

473
01:16:05,708 --> 01:16:07,625
concepts to build

474
01:16:07,625 --> 01:16:09,083
more composable software.

475
01:16:09,625 --> 01:16:10,833
Because one TypeScript

476
01:16:10,833 --> 01:16:13,041
service was not our goal.

477
01:16:13,250 --> 01:16:15,041
We were already thinking in multiple

478
01:16:15,041 --> 01:16:17,375
TypeScript services and in the end it did

479
01:16:17,375 --> 01:16:19,708
become reality and then we wanted to

480
01:16:19,708 --> 01:16:21,000
share code in between them.

481
01:16:21,000 --> 01:16:22,083
And then how do you do that?

482
01:16:22,541 --> 01:16:26,083
Well, we came up with a mono repo of

483
01:16:26,083 --> 01:16:29,666
different libraries that we can use that

484
01:16:29,666 --> 01:16:32,083
implement like Zendesk concerns, things

485
01:16:32,083 --> 01:16:33,541
like sharded database

486
01:16:33,541 --> 01:16:35,500
clients that know how to

487
01:16:35,500 --> 01:16:39,416
connect to our sharded database and yeah,

488
01:16:39,416 --> 01:16:40,208
many, many other

489
01:16:40,208 --> 01:16:42,083
libraries like this, these

490
01:16:42,083 --> 01:16:43,291
internal ones, these

491
01:16:43,291 --> 01:16:44,625
productivity booster ones.

492
01:16:44,916 --> 01:16:47,416
So we started implementing those and then

493
01:16:47,416 --> 01:16:48,375
we're like, okay, but

494
01:16:48,375 --> 01:16:49,250
they are like different

495
01:16:49,416 --> 01:16:52,083
libraries like suddenly they have this

496
01:16:52,083 --> 01:16:53,125
library has this API.

497
01:16:53,125 --> 01:16:54,458
This library has another one.

498
01:16:54,750 --> 01:16:56,166
I want to use them in combination.

499
01:16:56,916 --> 01:16:58,500
And then you think about how to

500
01:16:58,500 --> 01:16:59,708
hype all the APIs

501
01:16:59,708 --> 01:17:00,458
in the way that they

502
01:17:00,458 --> 01:17:01,708
nicely flow.

503
01:17:02,250 --> 01:17:04,583
So that's when one of my colleagues found

504
01:17:04,583 --> 01:17:07,458
fp-ts and that sounded really great.

505
01:17:07,666 --> 01:17:08,916
Obviously it had a huge

506
01:17:08,916 --> 01:17:10,000
learning curve for us.

507
01:17:10,250 --> 01:17:12,541
None of us were really much into

508
01:17:12,541 --> 01:17:13,166
functional programming.

509
01:17:13,333 --> 01:17:15,625
I only remembered some stuff from

510
01:17:15,625 --> 01:17:17,750
university, but definitely

511
01:17:17,750 --> 01:17:19,291
have it, haven't had like

512
01:17:19,291 --> 01:17:22,416
hands-on experience and then learning fp-ts

513
01:17:22,416 --> 01:17:23,333
like people who

514
01:17:23,333 --> 01:17:24,458
learned it, they probably

515
01:17:24,583 --> 01:17:27,250
know how hard it is because you don't

516
01:17:27,250 --> 01:17:28,750
have like real documentation.

517
01:17:29,041 --> 01:17:30,333
You have like API

518
01:17:30,333 --> 01:17:32,166
interface documentation.

519
01:17:32,791 --> 01:17:35,250
What gave you the confidence to take the

520
01:17:35,250 --> 01:17:36,625
leap of faith to go

521
01:17:36,625 --> 01:17:38,583
to reach for fp-ts and

522
01:17:38,583 --> 01:17:39,208
make that the

523
01:17:39,208 --> 01:17:41,125
foundation for your libraries?

524
01:17:41,250 --> 01:17:43,958
Um, desperation.

525
01:17:44,416 --> 01:17:44,875
I don't know.

526
01:17:46,333 --> 01:17:48,541
I was just really, I think we all just

527
01:17:48,541 --> 01:17:52,166
wanted to avoid another monolith.

528
01:17:52,666 --> 01:17:55,750
And obviously we, we cared a lot about

529
01:17:55,750 --> 01:17:57,375
these tiny libraries

530
01:17:57,375 --> 01:17:58,916
that were meant to be

531
01:17:58,916 --> 01:18:00,791
shared across the different services and

532
01:18:00,791 --> 01:18:03,041
different services need to do different

533
01:18:03,041 --> 01:18:04,000
things, right?

534
01:18:04,000 --> 01:18:06,666
Like they're in a different domain. So it's really hard to

535
01:18:06,666 --> 01:18:08,833
predict what API is the right one.

536
01:18:09,125 --> 01:18:11,166
So as long as we can stick to something

537
01:18:11,166 --> 01:18:11,666
and make it

538
01:18:11,666 --> 01:18:15,000
composable, that should work for

539
01:18:15,000 --> 01:18:15,958
most of the cases.

540
01:18:16,375 --> 01:18:18,166
I mean, that was at least our idea.

541
01:18:18,375 --> 01:18:20,916
The execution was rough.

542
01:18:21,291 --> 01:18:22,750
We were iterating

543
01:18:22,750 --> 01:18:23,541
on this group of

544
01:18:23,541 --> 01:18:25,500
libraries and we followed,

545
01:18:25,500 --> 01:18:30,083
versioning a strategy that would version each library.

546
01:18:30,083 --> 01:18:31,041
At the same time.

547
01:18:31,041 --> 01:18:32,625
So even if we make a change in one

548
01:18:32,625 --> 01:18:33,958
library, we would bump

549
01:18:33,958 --> 01:18:35,375
the version of all the

550
01:18:35,375 --> 01:18:38,083
libraries just to make it easier for the

551
01:18:38,083 --> 01:18:40,125
consumers to understand what version of

552
01:18:40,125 --> 01:18:41,625
one library works with another.

553
01:18:41,958 --> 01:18:45,041
So we opted for this and then the

554
01:18:45,041 --> 01:18:47,875
iteration was so fast on these APIs.

555
01:18:48,166 --> 01:18:50,250
We just kept in introducing breaking

556
01:18:50,250 --> 01:18:51,625
changes all the time because we

557
01:18:51,833 --> 01:18:54,416
discovered new and new ways

558
01:18:54,416 --> 01:18:57,250
of using these libraries.

559
01:18:58,291 --> 01:19:00,666
And so within the span of three years, I

560
01:19:00,666 --> 01:19:01,708
think we went from

561
01:19:01,708 --> 01:19:03,125
version zero to version

562
01:19:03,125 --> 01:19:05,041
27. Our consumers were

563
01:19:05,041 --> 01:19:06,250
not happy about this.

564
01:19:06,791 --> 01:19:09,458
Let's just say this. Right.

565
01:19:09,541 --> 01:19:11,791
So I suppose fp-ts at that point was

566
01:19:11,791 --> 01:19:13,458
already quite the pill to swallow for

567
01:19:14,166 --> 01:19:16,583
you all where you convinced yourself to

568
01:19:16,583 --> 01:19:18,875
do it, but then to have other API

569
01:19:18,958 --> 01:19:21,458
consumers that did not intentionally say

570
01:19:21,458 --> 01:19:23,708
like, yes, we want to bring in fp-ts

571
01:19:23,708 --> 01:19:25,875
into our life, but that's just the way

572
01:19:25,875 --> 01:19:27,875
how you offered it to them.

573
01:19:28,250 --> 01:19:30,625
That was probably even, even trickier.

574
01:19:31,125 --> 01:19:33,083
So, but that's what you started out with.

575
01:19:33,125 --> 01:19:35,583
And I suppose you, you chose that for

576
01:19:35,583 --> 01:19:36,958
the, for very

577
01:19:36,958 --> 01:19:38,708
understandable reasons, such

578
01:19:38,791 --> 01:19:41,875
as the dream of composability and code

579
01:19:41,875 --> 01:19:44,583
reuse and making all your systems more

580
01:19:45,000 --> 01:19:48,083
resilient, but it came at a price of

581
01:19:48,083 --> 01:19:50,750
like a rather esoteric flavor,

582
01:19:50,833 --> 01:19:54,166
particularly for the ones who were not

583
01:19:54,166 --> 01:19:56,000
getting up in the morning saying, yes,

584
01:19:56,250 --> 01:19:58,541
I want to do functional programming, but

585
01:19:58,541 --> 01:20:01,458
you just want to do proper programming,

586
01:20:01,666 --> 01:20:02,875
uh, maybe in TypeScript.

587
01:20:03,583 --> 01:20:06,708
So, and if I understand correctly, this

588
01:20:06,708 --> 01:20:09,375
is where you have been kind of like

589
01:20:09,375 --> 01:20:12,500
running into growing pains of fp-ts and

590
01:20:12,500 --> 01:20:14,166
building larger systems out of this.

591
01:20:14,708 --> 01:20:17,875
And at some point you found Effect.

592
01:20:18,000 --> 01:20:19,000
So tell me about that.

593
01:20:19,375 --> 01:20:19,875
Oh yeah.

594
01:20:20,166 --> 01:20:22,083
So that, yes.

595
01:20:22,500 --> 01:20:24,708
So basically with this fp-ts we

596
01:20:24,708 --> 01:20:25,791
were trying to build

597
01:20:25,791 --> 01:20:27,625
something similar to Effect.

598
01:20:27,750 --> 01:20:30,833
We wanted to have a system which allowed

599
01:20:30,833 --> 01:20:32,458
our consumers to

600
01:20:32,458 --> 01:20:33,958
do proper dependency

601
01:20:33,958 --> 01:20:36,500
injection with all the config that we

602
01:20:36,500 --> 01:20:38,291
provided so that when they start their

603
01:20:38,333 --> 01:20:41,958
program, like if the config is wrong, it

604
01:20:41,958 --> 01:20:42,916
will just not deploy.

605
01:20:43,541 --> 01:20:45,708
We want it to eliminate as

606
01:20:45,708 --> 01:20:47,416
many foot guns as possible.

607
01:20:47,625 --> 01:20:49,125
Obviously resource management was

608
01:20:49,125 --> 01:20:50,625
another big thing that

609
01:20:50,625 --> 01:20:51,541
we were looking into.

610
01:20:51,833 --> 01:20:54,458
Like how do you properly handle like all

611
01:20:54,458 --> 01:20:56,875
the interrupt signals coming from

612
01:20:56,958 --> 01:20:59,083
Kubernetes when it's trying to kill

613
01:20:59,083 --> 01:21:00,416
or restart your container.

614
01:21:00,708 --> 01:21:02,750
These things.

615
01:21:02,750 --> 01:21:06,375
They require a lot of effort and they're

616
01:21:06,375 --> 01:21:08,833
not easy things to do, especially if you

617
01:21:08,833 --> 01:21:11,416
want highly composable solution.

618
01:21:11,791 --> 01:21:13,416
So I think one of my colleagues,

619
01:21:13,416 --> 01:21:16,791
was my partner in crime when it came

620
01:21:16,791 --> 01:21:20,208
to introducing fp-ts to the

621
01:21:20,208 --> 01:21:20,958
organization at

622
01:21:20,958 --> 01:21:23,041
large, he found Effect.

623
01:21:23,041 --> 01:21:24,958
I don't know how he found it, but he

624
01:21:24,958 --> 01:21:28,375
found it and it was maybe in 2021.

625
01:21:28,958 --> 01:21:29,958
I don't remember.

626
01:21:29,958 --> 01:21:31,958
I'm so bad with years, especially because

627
01:21:31,958 --> 01:21:33,708
it was like the pandemic there.

628
01:21:33,708 --> 01:21:35,708
And suddenly like two

629
01:21:35,708 --> 01:21:37,875
years felt like one or half.

630
01:21:40,458 --> 01:21:42,416
But around the time, it was weird.

631
01:21:43,500 --> 01:21:45,250
Time flow flew, flew differently.

632
01:21:46,958 --> 01:21:48,708
But he did found it and it wasn't

633
01:21:48,708 --> 01:21:50,791
like we were jumping on it immediately

634
01:21:50,958 --> 01:21:54,125
because at the time there wasn't really

635
01:21:54,125 --> 01:21:56,416
such a huge buzz around it.

636
01:21:56,416 --> 01:21:57,541
Like it is nowadays.

637
01:21:58,041 --> 01:21:58,916
Also

638
01:21:58,916 --> 01:22:01,666
didn't have a stable API.

639
01:22:02,166 --> 01:22:05,083
So we were for about at least a year, we

640
01:22:05,083 --> 01:22:06,958
were mostly observing Effect from the

641
01:22:06,958 --> 01:22:08,791
sidelines, we didn't talk to also no

642
01:22:08,791 --> 01:22:10,750
documentation at that point yet.

643
01:22:11,500 --> 01:22:12,458
Yeah, exactly.

644
01:22:12,791 --> 01:22:15,291
It was just another fp-ts for us

645
01:22:15,291 --> 01:22:17,750
from the sidelines looking at it, but

646
01:22:17,750 --> 01:22:20,541
it looked way better than fp-ts it

647
01:22:20,541 --> 01:22:23,000
looked like, okay, this is not just

648
01:22:23,125 --> 01:22:24,000
abstractions, this is

649
01:22:24,000 --> 01:22:25,875
also some implementation.

650
01:22:26,041 --> 01:22:27,208
Finally, something that

651
01:22:27,208 --> 01:22:28,750
makes our lives easier.

652
01:22:29,000 --> 01:22:30,833
It's like a general programming

653
01:22:30,833 --> 01:22:32,791
framework, how to build like resilient

654
01:22:32,958 --> 01:22:37,208
services and all the dependency injection

655
01:22:37,208 --> 01:22:39,541
resource management,

656
01:22:39,541 --> 01:22:41,250
configuration management,

657
01:22:41,250 --> 01:22:43,083
building the layers of dependencies.

658
01:22:43,666 --> 01:22:45,541
That's all taken care of for you.

659
01:22:45,541 --> 01:22:48,416
So, so that looked really promising.

660
01:22:49,291 --> 01:22:51,250
And as I mentioned, like for a year, we

661
01:22:51,250 --> 01:22:53,458
were just looking and watching,

662
01:22:53,458 --> 01:22:55,333
Effect and its development.

663
01:22:55,333 --> 01:22:58,041
And then later when it felt like, okay,

664
01:22:58,041 --> 01:22:59,625
now, now it seems like it's, it's

665
01:22:59,625 --> 01:23:00,625
like stabilizing

666
01:23:00,625 --> 01:23:02,375
around some sort of an API.

667
01:23:03,250 --> 01:23:05,625
We still don't really agree with some

668
01:23:05,625 --> 01:23:08,208
namings, of some concepts, which

669
01:23:08,208 --> 01:23:09,958
then also changed name and everything.

670
01:23:10,250 --> 01:23:12,125
And now it's like much, much better.

671
01:23:12,458 --> 01:23:14,375
But we were, that that's, that's when

672
01:23:14,375 --> 01:23:16,208
we started to seriously

673
01:23:16,375 --> 01:23:17,833
consider adopting

674
01:23:17,833 --> 01:23:19,666
it on some, some project.

675
01:23:20,250 --> 01:23:21,125
We didn't really know

676
01:23:21,125 --> 01:23:22,333
which project should it be.

677
01:23:22,666 --> 01:23:25,041
We didn't really want to go right into

678
01:23:25,041 --> 01:23:27,708
the migration of an existing fp-ts

679
01:23:27,708 --> 01:23:28,583
project, because we

680
01:23:28,583 --> 01:23:30,041
didn't know how to do it.

681
01:23:30,625 --> 01:23:32,250
It was a little bit weird because

682
01:23:32,250 --> 01:23:34,833
from fp-ts we had all these reader

683
01:23:34,958 --> 01:23:37,166
task, eithers, and we, we could

684
01:23:37,166 --> 01:23:39,166
intuitively see how it would map to an

685
01:23:39,166 --> 01:23:41,833
Effect, but we didn't quite understand

686
01:23:41,833 --> 01:23:45,208
how, how it would work with our flavor

687
01:23:45,208 --> 01:23:47,458
of fp-ts if you know what I mean?

688
01:23:47,458 --> 01:23:49,708
Like we built those abstractions for

689
01:23:49,708 --> 01:23:51,750
managing dependencies and

690
01:23:52,041 --> 01:23:53,583
resources and whatnot.

691
01:23:54,041 --> 01:23:55,791
Like how would that, how would we make

692
01:23:55,791 --> 01:23:57,916
the step from that to Effect?

693
01:23:58,125 --> 01:24:01,083
So what we ended up doing in the end, my

694
01:24:01,083 --> 01:24:04,000
team got this opportunity to rebuild

695
01:24:04,208 --> 01:24:06,083
the existing customer satisfaction

696
01:24:06,083 --> 01:24:08,833
feature and we are making

697
01:24:08,833 --> 01:24:11,625
it like more flexible, like it's almost

698
01:24:11,625 --> 01:24:13,375
on our end in the backend,

699
01:24:13,375 --> 01:24:15,958
we treat these customers satisfaction

700
01:24:15,958 --> 01:24:18,458
surveys as, as generic surveys,

701
01:24:18,458 --> 01:24:19,708
because like, what is the customer

702
01:24:19,708 --> 01:24:20,666
satisfaction survey?

703
01:24:20,666 --> 01:24:22,791
It's like you ask a bunch of questions

704
01:24:22,791 --> 01:24:25,166
and one question has to be how satisfied

705
01:24:25,166 --> 01:24:28,041
you are about whatever you're measuring

706
01:24:28,041 --> 01:24:30,583
against in our case, like satisfaction

707
01:24:30,750 --> 01:24:32,125
about how your ticket was

708
01:24:32,125 --> 01:24:33,666
handled by the support agent.

709
01:24:33,958 --> 01:24:35,666
But in the end, it's just a survey.

710
01:24:35,666 --> 01:24:37,083
It's a bunch of questions and different

711
01:24:37,083 --> 01:24:38,625
types of questions and whatnot.

712
01:24:38,875 --> 01:24:41,416
So it looked like a perfect opportunity

713
01:24:41,416 --> 01:24:44,791
for us to try Effect.

714
01:24:44,791 --> 01:24:46,291
Especially because there were, there

715
01:24:46,291 --> 01:24:48,541
was already like Tim Smart's

716
01:24:48,541 --> 01:24:51,708
SQL package, SQL effect, which is like

717
01:24:51,708 --> 01:24:53,833
the predecessor of effect SQL.

718
01:24:53,833 --> 01:24:55,458
So that, that was really good because our

719
01:24:55,458 --> 01:24:57,125
service needs to,

720
01:24:57,125 --> 01:24:58,708
interact with the database for sure.

721
01:24:59,083 --> 01:25:00,750
So, so that, that gave me

722
01:25:00,750 --> 01:25:01,875
a lot of confidence there.

723
01:25:02,041 --> 01:25:03,208
obviously, and now

724
01:25:03,208 --> 01:25:04,500
we're using Effect SQL.

725
01:25:04,791 --> 01:25:08,000
I'm trying to like being lockstep

726
01:25:08,000 --> 01:25:09,708
with all the development

727
01:25:09,875 --> 01:25:12,291
with Effect itself, the core

728
01:25:12,291 --> 01:25:14,083
library, and then also like all the

729
01:25:14,083 --> 01:25:16,416
satellites that the level

730
01:25:16,416 --> 01:25:18,833
one and layer one abstractions.

731
01:25:19,250 --> 01:25:21,166
So it sounded like this was like the

732
01:25:21,166 --> 01:25:24,041
initial prototype where you gave Effect

733
01:25:24,041 --> 01:25:26,666
or like the initial trial project where

734
01:25:26,666 --> 01:25:29,416
you went from observing the Effect

735
01:25:29,458 --> 01:25:31,375
development to actually getting your

736
01:25:31,375 --> 01:25:34,041
hands dirty and seeing, okay, is this

737
01:25:34,166 --> 01:25:36,416
fulfilling all of our dreams, how

738
01:25:36,416 --> 01:25:38,458
our world already got better through

739
01:25:38,458 --> 01:25:40,583
fp-ts but we've introduced a couple of

740
01:25:40,583 --> 01:25:42,625
like new problems and maybe some of our

741
01:25:42,958 --> 01:25:45,375
teammates or some of the other teams, uh,

742
01:25:45,375 --> 01:25:46,541
have a hard time with it.

743
01:25:46,750 --> 01:25:48,750
And that could be addressed by Effect.

744
01:25:48,750 --> 01:25:49,958
And so now you've adopted it.

745
01:25:50,125 --> 01:25:50,958
How did that go?

746
01:25:50,958 --> 01:25:52,958
How quickly were you up and running?

747
01:25:52,958 --> 01:25:54,250
How quickly were you productive?

748
01:25:54,750 --> 01:25:56,125
And, uh, also very

749
01:25:56,125 --> 01:25:58,958
importantly, what did other teams think?

750
01:25:59,458 --> 01:26:01,958
So before I actually get into that, let

751
01:26:01,958 --> 01:26:05,041
me just tell you that for us getting rid

752
01:26:05,041 --> 01:26:07,375
of fp-ts or moving towards something else

753
01:26:07,375 --> 01:26:08,875
is, was existential.

754
01:26:09,416 --> 01:26:12,333
Like there was no universe where we would

755
01:26:12,333 --> 01:26:15,500
be able to push for fp-ts, at

756
01:26:15,500 --> 01:26:19,458
least in our usage of fp-ts in a way we

757
01:26:19,458 --> 01:26:21,541
did at a larger scale.

758
01:26:21,541 --> 01:26:23,750
Like if we wanted this TypeScript service

759
01:26:23,750 --> 01:26:27,125
framework to fly and be useful for not

760
01:26:27,166 --> 01:26:30,291
just our two teams that used it, but also

761
01:26:30,291 --> 01:26:33,500
outside of our org for all the TypeScript

762
01:26:33,500 --> 01:26:35,958
native teams, who we acquired

763
01:26:35,958 --> 01:26:37,541
through the business deals and stuff.

764
01:26:37,541 --> 01:26:38,791
We really had to get rid of it.

765
01:26:38,791 --> 01:26:40,958
We had to find like an alternative and

766
01:26:40,958 --> 01:26:44,291
unfortunately there was like no real

767
01:26:44,291 --> 01:26:46,541
alternative, beside Effect.

768
01:26:46,583 --> 01:26:48,583
But I'll get into why this is

769
01:26:48,583 --> 01:26:50,458
actually a pretty good alternative also

770
01:26:50,625 --> 01:26:52,541
for teams that only

771
01:26:52,541 --> 01:26:55,541
use native node JS TypeScript.

772
01:26:55,833 --> 01:26:58,083
But yeah, so, after I

773
01:26:58,083 --> 01:27:00,916
tried Effect for the first time, so I

774
01:27:00,916 --> 01:27:04,500
think it was last year in June that I

775
01:27:04,500 --> 01:27:07,250
made the first Effect commit ever at

776
01:27:07,291 --> 01:27:09,416
Zendesk, getting up and running was

777
01:27:09,416 --> 01:27:11,291
fairly easy because I could get a

778
01:27:11,750 --> 01:27:15,750
skeleton of an application using our fp-ts

779
01:27:15,750 --> 01:27:17,166
based service framework.

780
01:27:17,625 --> 01:27:19,583
And then, yeah, I think one important

781
01:27:19,583 --> 01:27:21,958
thing that I need to mention is that,

782
01:27:22,125 --> 01:27:24,791
we're mostly building these services

783
01:27:24,791 --> 01:27:26,750
on graph QL and then we have graphQL

784
01:27:26,750 --> 01:27:29,000
Federation, so yeah, like lots of

785
01:27:29,000 --> 01:27:31,291
microservices, each owning their own

786
01:27:31,333 --> 01:27:33,916
domain and we call them sub graphs and

787
01:27:33,916 --> 01:27:36,416
then they compose into a super graph through

788
01:27:36,458 --> 01:27:36,916
the Apollo

789
01:27:36,916 --> 01:27:37,916
Federation solution.

790
01:27:38,458 --> 01:27:39,833
So this survey service

791
01:27:39,833 --> 01:27:41,416
was just another sub graph.

792
01:27:41,666 --> 01:27:43,958
So once I got to the point where I could

793
01:27:43,958 --> 01:27:47,041
start implementing the resolvers for the

794
01:27:47,041 --> 01:27:49,833
different graphQL objects and

795
01:27:49,833 --> 01:27:51,583
mutations and queries and whatnot, um,

796
01:27:51,583 --> 01:27:54,250
I was already, at that point I could

797
01:27:54,250 --> 01:27:55,958
finally use Effect.

798
01:27:56,083 --> 01:27:58,333
So I was using Effect in the beginning

799
01:27:58,333 --> 01:28:01,875
only at the resolver level of my

800
01:28:01,875 --> 01:28:02,333
application.

801
01:28:03,000 --> 01:28:04,666
So, so that went pretty well.

802
01:28:05,250 --> 01:28:06,291
Startup was very easy.

803
01:28:06,541 --> 01:28:09,333
And then obviously like I created like an

804
01:28:09,333 --> 01:28:11,208
application skeleton that I'm familiar

805
01:28:11,375 --> 01:28:14,083
with, and then the resolvers were Effect.

806
01:28:14,333 --> 01:28:17,125
And that nicely adapted into the

807
01:28:17,125 --> 01:28:19,166
promise based resolver because with

808
01:28:19,166 --> 01:28:20,791
an effect, you can run it as a promise.

809
01:28:21,500 --> 01:28:22,333
So that was perfect.

810
01:28:22,541 --> 01:28:24,333
And then after that, it was just

811
01:28:24,333 --> 01:28:26,583
like, okay, let's, let's start with this.

812
01:28:26,583 --> 01:28:27,791
Let's start with a simple Effect.

813
01:28:28,041 --> 01:28:29,625
Let's start with a dummy resolver.

814
01:28:30,291 --> 01:28:32,041
And then next step was

815
01:28:32,041 --> 01:28:33,375
let's add some validation.

816
01:28:33,583 --> 01:28:36,291
So we brought in Effect Schema and yeah,

817
01:28:36,291 --> 01:28:37,583
now that I mentioned Effect Schema,

818
01:28:37,583 --> 01:28:39,125
I think that's probably the

819
01:28:39,125 --> 01:28:41,083
best gateway drug into Effect.

820
01:28:41,416 --> 01:28:44,416
Like everybody needs input validation.

821
01:28:45,500 --> 01:28:48,041
Everybody that it's almost impossible to

822
01:28:48,041 --> 01:28:51,333
imagine a piece of software, like a,

823
01:28:51,500 --> 01:28:54,458
you know, an HTTP service that doesn't

824
01:28:54,458 --> 01:28:56,458
need input validation unimaginable.

825
01:28:57,000 --> 01:28:58,083
Yeah, I definitely agree.

826
01:28:58,083 --> 01:29:00,375
I mean, this is where, why Zod as a

827
01:29:00,375 --> 01:29:02,791
standalone library is also getting so

828
01:29:02,791 --> 01:29:05,000
popular, but I think people

829
01:29:05,000 --> 01:29:06,250
will see that their

830
01:29:06,250 --> 01:29:08,791
requirements will grow beyond just input

831
01:29:08,791 --> 01:29:12,458
validation where you maybe need to run some

832
01:29:12,500 --> 01:29:13,125
effectful

833
01:29:13,125 --> 01:29:14,750
code, like some, some

834
01:29:14,750 --> 01:29:16,208
code that can't go wrong,

835
01:29:16,208 --> 01:29:17,916
et cetera, as part of this validation,

836
01:29:17,916 --> 01:29:20,125
but then also critically, not just

837
01:29:20,291 --> 01:29:23,125
parsing and validating the code, but at

838
01:29:23,125 --> 01:29:24,916
some point you might also want to

839
01:29:25,166 --> 01:29:27,750
re serialize it as you, you don't just

840
01:29:27,750 --> 01:29:30,250
receive data, but you want to ship it

841
01:29:30,250 --> 01:29:31,583
over the wire to another

842
01:29:31,583 --> 01:29:33,291
service or to your front end.

843
01:29:33,875 --> 01:29:35,458
And then you're scratching your head

844
01:29:35,458 --> 01:29:37,458
because, okay, you have now this beautiful

845
01:29:37,500 --> 01:29:40,583
sod system that can validate and parse

846
01:29:40,583 --> 01:29:42,791
data, but now you want to go the other

847
01:29:42,791 --> 01:29:44,958
way around and that is impossible.

848
01:29:45,708 --> 01:29:48,583
And if you use a whatever, like you've

849
01:29:48,583 --> 01:29:50,750
created a class, a user class that you

850
01:29:50,791 --> 01:29:52,958
parse things into, and now you have your

851
01:29:52,958 --> 01:29:54,833
data expressed through like those

852
01:29:54,833 --> 01:29:57,291
classes or more complex data structures.

853
01:29:58,000 --> 01:29:58,958
And you want to call

854
01:29:58,958 --> 01:30:00,625
JSON.stringify on it.

855
01:30:01,250 --> 01:30:03,666
And suddenly stuff blows up.

856
01:30:03,666 --> 01:30:05,291
And this is where Effect Schema comes

857
01:30:05,291 --> 01:30:07,291
in and I completely agree.

858
01:30:07,291 --> 01:30:10,208
This is going to be my primary bet for

859
01:30:10,208 --> 01:30:12,000
what will be the, the main gateway

860
01:30:12,125 --> 01:30:14,041
drug that brings people to Effect.

861
01:30:14,708 --> 01:30:16,833
And it's has gotten so nice.

862
01:30:17,125 --> 01:30:18,916
I think this is where in the past where

863
01:30:18,916 --> 01:30:20,250
you've been using fp-ts

864
01:30:20,250 --> 01:30:21,916
you've probably used io-ts

865
01:30:21,916 --> 01:30:23,333
Effect Schema is written by the same

866
01:30:23,333 --> 01:30:25,291
person, but I feel like

867
01:30:25,291 --> 01:30:28,000
It's a new incarnation, of the

868
01:30:28,000 --> 01:30:29,750
same person who just made everything

869
01:30:29,791 --> 01:30:31,458
so much nicer to use so

870
01:30:31,458 --> 01:30:32,791
much easier to understand.

871
01:30:33,458 --> 01:30:35,458
So yeah, huge fan of that part.

872
01:30:35,875 --> 01:30:36,208
Absolutely.

873
01:30:36,666 --> 01:30:36,791
Same.

874
01:30:37,000 --> 01:30:39,291
I'm a huge fan of Giulio who does

875
01:30:39,291 --> 01:30:40,708
all of this, this work.

876
01:30:40,708 --> 01:30:41,500
It's just amazing.

877
01:30:41,791 --> 01:30:45,208
-big shoutout to Giulio. -yeah, absolutely.

878
01:30:46,125 --> 01:30:48,291
fp-ts and io-ts helped us so much in the

879
01:30:48,291 --> 01:30:50,958
beginning and now seeing him also do all

880
01:30:50,958 --> 01:30:54,083
of the work, for Schema at Effect and

881
01:30:54,083 --> 01:30:55,708
doing a lot of Effect documentation

882
01:30:55,875 --> 01:30:58,750
work as well, it's just, uh, yeah, it's,

883
01:30:58,750 --> 01:30:59,666
it's amazing to see that.

884
01:31:00,125 --> 01:31:02,958
So sounds like last year, last summer

885
01:31:02,958 --> 01:31:05,958
you've written your first Effect code at

886
01:31:05,958 --> 01:31:08,583
Zendesk, and I think you've been

887
01:31:08,583 --> 01:31:10,375
by the end of that year, you've been

888
01:31:10,500 --> 01:31:12,083
getting to a point where it could be

889
01:31:12,083 --> 01:31:15,041
rolled out and we've been just chatting

890
01:31:15,125 --> 01:31:17,666
before where you mentioned that this year

891
01:31:17,666 --> 01:31:19,750
it's getting released in GA.

892
01:31:19,833 --> 01:31:22,083
So, I suppose across like all

893
01:31:22,083 --> 01:31:24,041
production traffic, et cetera.

894
01:31:24,375 --> 01:31:25,708
So how's that gone?

895
01:31:26,208 --> 01:31:28,250
And how did your team like it?

896
01:31:28,500 --> 01:31:30,000
How, how was your experience?

897
01:31:30,291 --> 01:31:30,666
Yes.

898
01:31:31,250 --> 01:31:33,750
So my personal experience was, was great.

899
01:31:33,958 --> 01:31:34,958
Let's start with me and

900
01:31:34,958 --> 01:31:35,958
then we can go to the team.

901
01:31:36,000 --> 01:31:36,958
And then we can go

902
01:31:36,958 --> 01:31:38,458
like outside of the team.

903
01:31:40,125 --> 01:31:41,000
Yeah, I was taking

904
01:31:41,000 --> 01:31:42,583
really baby steps with effect.

905
01:31:42,875 --> 01:31:45,166
So after input parsing and

906
01:31:45,166 --> 01:31:48,041
validation the next big step was to

907
01:31:48,041 --> 01:31:50,083
interact with the database, obviously

908
01:31:50,083 --> 01:31:53,833
relying just on SQL effects was not

909
01:31:53,875 --> 01:31:55,958
enough because we have

910
01:31:55,958 --> 01:31:57,958
a sharded database.

911
01:31:58,166 --> 01:32:00,750
We have like this big shared sharded

912
01:32:00,750 --> 01:32:03,416
database instances that every

913
01:32:03,416 --> 01:32:04,750
application interacts with.

914
01:32:04,916 --> 01:32:07,416
So we had to write like a wrapper,

915
01:32:07,416 --> 01:32:09,625
for SQL effects that would read

916
01:32:09,625 --> 01:32:12,708
the configuration, create one SQL

917
01:32:12,708 --> 01:32:15,125
pool per shard node.

918
01:32:15,125 --> 01:32:18,250
So basically one for a writer, one for a

919
01:32:18,250 --> 01:32:20,333
reader, and then we would have like this

920
01:32:20,333 --> 01:32:22,875
big collection of writers and readers

921
01:32:22,875 --> 01:32:26,000
group by shards, and then every time a

922
01:32:26,000 --> 01:32:27,458
request comes in, we would have to figure

923
01:32:27,458 --> 01:32:30,625
out what is the shard ID reaching to the

924
01:32:30,625 --> 01:32:33,083
collection handle like short shard not

925
01:32:33,083 --> 01:32:34,666
found errors and stuff like this.

926
01:32:35,375 --> 01:32:37,166
Finally getting the shard, getting the

927
01:32:37,166 --> 01:32:38,791
pool for the writer or the reader

928
01:32:38,916 --> 01:32:40,541
that you currently need at the

929
01:32:40,541 --> 01:32:42,333
point where you need to

930
01:32:42,333 --> 01:32:43,166
like call the database.

931
01:32:43,458 --> 01:32:46,083
And then that's when we get the SQL

932
01:32:46,083 --> 01:32:48,291
effects, like the SQL client from the

933
01:32:48,291 --> 01:32:51,166
library at the time, like the pool is

934
01:32:51,166 --> 01:32:52,500
basically provided by that.

935
01:32:52,666 --> 01:32:53,916
And then that was great.

936
01:32:54,083 --> 01:32:56,125
once we got there, because then we

937
01:32:56,125 --> 01:32:57,708
could persist events.

938
01:32:58,291 --> 01:33:00,458
So one thing that I want to mention is

939
01:33:00,458 --> 01:33:04,166
like, we use event sourcing where exactly

940
01:33:04,375 --> 01:33:07,875
this two way bi-directional schemas,

941
01:33:07,875 --> 01:33:10,291
work really well, because on

942
01:33:10,291 --> 01:33:13,208
one hand, like when the request comes in,

943
01:33:13,208 --> 01:33:16,666
we do the input parsing and then that

944
01:33:17,000 --> 01:33:21,958
input represents almost the exact

945
01:33:21,958 --> 01:33:24,125
payload that we then write to the

946
01:33:24,125 --> 01:33:26,750
database which represents our event.

947
01:33:26,750 --> 01:33:29,541
So once we did the parsing, obviously we

948
01:33:29,541 --> 01:33:32,541
need to serialize it into, into a

949
01:33:32,541 --> 01:33:35,250
string that we can then push into a,

950
01:33:35,250 --> 01:33:38,000
into a text column in SQL.

951
01:33:38,000 --> 01:33:40,125
So yeah, that was a big thing.

952
01:33:40,125 --> 01:33:42,291
And then obviously the next step

953
01:33:42,291 --> 01:33:44,625
after the database client, there was

954
01:33:44,625 --> 01:33:47,333
like the HTTP layer where we might

955
01:33:47,333 --> 01:33:49,666
need to call like different HTTP

956
01:33:49,666 --> 01:33:52,208
services, especially around the feature

957
01:33:52,208 --> 01:33:53,458
flags and stuff like that.

958
01:33:53,458 --> 01:33:54,916
So yeah, really baby steps.

959
01:33:54,916 --> 01:33:56,875
And then eventually we added some

960
01:33:56,875 --> 01:33:59,291
level of observability,

961
01:33:59,291 --> 01:34:01,291
logging, tracing metrics.

962
01:34:01,541 --> 01:34:02,166
In the beginning.

963
01:34:02,166 --> 01:34:03,958
It wasn't really anything sophisticated.

964
01:34:04,250 --> 01:34:06,208
We were relying mostly on the data dog,

965
01:34:06,208 --> 01:34:08,708
tracing library defaults, which

966
01:34:08,708 --> 01:34:11,583
provided some level of detail.

967
01:34:12,000 --> 01:34:13,458
It didn't work very well.

968
01:34:13,458 --> 01:34:15,458
We didn't get very detailed traces,

969
01:34:15,458 --> 01:34:17,625
but it was good enough to see some

970
01:34:17,625 --> 01:34:20,666
traffic and what's going on at the, maybe

971
01:34:20,666 --> 01:34:22,166
let's say the GraphQL level.

972
01:34:22,500 --> 01:34:23,708
So everything that is an Effect,

973
01:34:24,083 --> 01:34:26,416
obviously we couldn't get any visibility

974
01:34:26,583 --> 01:34:29,125
into that, but then we switched to

975
01:34:29,125 --> 01:34:30,875
Otel eventually, and then things

976
01:34:30,958 --> 01:34:34,375
improved from there and then as the more

977
01:34:34,375 --> 01:34:36,291
I learned about Effect, the closer

978
01:34:36,541 --> 01:34:39,416
I was getting to turning the application

979
01:34:39,416 --> 01:34:41,666
into an end to end Effect.

980
01:34:42,125 --> 01:34:44,166
And today it's like fully Effect.

981
01:34:44,416 --> 01:34:46,041
So it's effect from top to bottom.

982
01:34:46,250 --> 01:34:46,666
Right.

983
01:34:46,916 --> 01:34:49,208
And I think this is a pattern that I've

984
01:34:49,208 --> 01:34:52,083
seen a lot both in the apps that I've

985
01:34:52,083 --> 01:34:53,958
been building and where I take, I've

986
01:34:53,958 --> 01:34:56,458
taken my first steps with Effect, but

987
01:34:56,500 --> 01:34:59,166
also in what I see how other people are

988
01:34:59,166 --> 01:35:01,041
approaching effect is like how

989
01:35:01,041 --> 01:35:03,208
nicely it can be adopted incrementally.

990
01:35:03,708 --> 01:35:05,958
Where if you think about your program as

991
01:35:05,958 --> 01:35:09,583
a tree, you can very easily start

992
01:35:09,583 --> 01:35:12,416
at like any layer of the tree, really

993
01:35:12,416 --> 01:35:14,666
like at any position, you can start

994
01:35:14,666 --> 01:35:15,875
out with the leaves and

995
01:35:15,875 --> 01:35:17,250
write those as effects.

996
01:35:17,500 --> 01:35:20,375
And then at some point, just run them as

997
01:35:20,375 --> 01:35:22,583
promises and assuming your, your other

998
01:35:22,708 --> 01:35:25,000
code is already like promises or

999
01:35:25,000 --> 01:35:28,583
async await based, you can just call your

1000
01:35:28,583 --> 01:35:31,458
new effect code as good old promises.

1001
01:35:32,333 --> 01:35:35,375
Or you can do it on the other way around.

1002
01:35:35,375 --> 01:35:37,875
And at the root of your program, you

1003
01:35:37,875 --> 01:35:39,041
can rewrite some

1004
01:35:39,041 --> 01:35:40,875
parts that are maybe more

1005
01:35:41,083 --> 01:35:43,333
for governing and overseeing the

1006
01:35:43,333 --> 01:35:44,541
execution of your program.

1007
01:35:44,541 --> 01:35:46,750
You can rewrite that with Effect, for

1008
01:35:46,750 --> 01:35:49,583
example, request handlers, but then,

1009
01:35:49,625 --> 01:35:51,500
still call out to promises and everything

1010
01:35:51,500 --> 01:35:53,458
else of your program is still promises.

1011
01:35:54,083 --> 01:35:55,583
Or you can do it somewhere in the middle

1012
01:35:55,583 --> 01:35:58,416
and say, okay, at some point we're like

1013
01:35:58,416 --> 01:36:00,958
in async await, we're going to rewrite

1014
01:36:00,958 --> 01:36:03,583
some part in with effects, but then the

1015
01:36:03,583 --> 01:36:05,166
stuff way further down,

1016
01:36:05,166 --> 01:36:06,708
we'll call again as promises.

1017
01:36:07,458 --> 01:36:08,500
And so you can mix and

1018
01:36:08,500 --> 01:36:09,791
match as much as you want.

1019
01:36:10,416 --> 01:36:13,000
But what I've typically seen is that

1020
01:36:13,000 --> 01:36:14,250
people get very

1021
01:36:14,250 --> 01:36:15,333
productive very quickly

1022
01:36:15,708 --> 01:36:18,000
with like some incremental adoption.

1023
01:36:18,541 --> 01:36:19,083
And then they see

1024
01:36:19,083 --> 01:36:20,541
like, Oh, wait a second.

1025
01:36:20,708 --> 01:36:22,166
That part is still not as nice.

1026
01:36:22,291 --> 01:36:23,250
And that is some of the

1027
01:36:23,250 --> 01:36:25,333
leftover promise code.

1028
01:36:25,833 --> 01:36:27,583
And then in no time

1029
01:36:27,583 --> 01:36:29,125
that's rewritten to effect as well.

1030
01:36:29,375 --> 01:36:31,041
I think what is typically

1031
01:36:31,041 --> 01:36:32,208
the case is the more

1032
01:36:32,208 --> 01:36:33,500
you rewrite to effect

1033
01:36:33,958 --> 01:36:36,125
that kind of collapses the amount

1034
01:36:36,125 --> 01:36:39,708
of code typically like by half and

1035
01:36:39,708 --> 01:36:42,083
shines a very bright light on some of

1036
01:36:42,083 --> 01:36:43,916
the holes that you haven't yet

1037
01:36:43,916 --> 01:36:46,166
covered such as error handling very

1038
01:36:46,166 --> 01:36:48,250
often, like Effect kind of shows

1039
01:36:48,250 --> 01:36:50,291
you a mirror and say like asks you like,

1040
01:36:50,291 --> 01:36:52,500
Hey, here stuff could go wrong.

1041
01:36:52,583 --> 01:36:52,916
Right.

1042
01:36:53,125 --> 01:36:54,791
What have you done so far about it?

1043
01:36:54,875 --> 01:36:55,916
Not really much.

1044
01:36:56,208 --> 01:36:59,083
And so it forces you to do the right thing

1045
01:36:59,083 --> 01:37:00,375
That sounds very familiar.

1046
01:37:00,375 --> 01:37:01,083
What you've described.

1047
01:37:01,625 --> 01:37:01,916
Absolutely.

1048
01:37:02,416 --> 01:37:03,666
Writing Effect has

1049
01:37:03,666 --> 01:37:05,541
a lot of knock on Effect.

1050
01:37:06,500 --> 01:37:09,666
Pun not intended. On how you write

1051
01:37:09,666 --> 01:37:11,791
maintainable code on a day to day basis.

1052
01:37:12,208 --> 01:37:13,958
Things like obviously the error

1053
01:37:13,958 --> 01:37:15,125
handling it's amazing.

1054
01:37:15,500 --> 01:37:19,083
Very recently I implemented a Kafka

1055
01:37:19,083 --> 01:37:20,208
consumer with

1056
01:37:20,208 --> 01:37:23,041
effect, um, using Kafka JS.

1057
01:37:23,083 --> 01:37:25,916
So I just wrapped Kafka JS in an Effect,

1058
01:37:25,916 --> 01:37:28,750
API and then had like an

1059
01:37:28,750 --> 01:37:30,833
abstraction for a consumer and then

1060
01:37:30,833 --> 01:37:32,416
obviously the consumer can consume

1061
01:37:32,500 --> 01:37:34,083
things, um, either message

1062
01:37:34,083 --> 01:37:35,166
by message or in batches.

1063
01:37:35,875 --> 01:37:38,750
So I just needed a message by message,

1064
01:37:38,750 --> 01:37:41,166
type of consumption.

1065
01:37:41,166 --> 01:37:43,291
So that's what my abstraction does.

1066
01:37:44,083 --> 01:37:46,083
It creates a consumer and you pass in

1067
01:37:46,083 --> 01:37:48,541
like the effect that hand a function

1068
01:37:48,708 --> 01:37:50,416
that returns an effect that handles like

1069
01:37:50,416 --> 01:37:52,916
the incoming message, the payload.

1070
01:37:53,166 --> 01:37:55,125
It was just really beautiful to see

1071
01:37:55,125 --> 01:37:57,583
how the different error cases

1072
01:37:57,583 --> 01:38:01,083
all bubble up to the very root of

1073
01:38:01,083 --> 01:38:02,416
your message handler.

1074
01:38:03,083 --> 01:38:06,166
And then in Kafka, like when you consume

1075
01:38:06,166 --> 01:38:08,416
the messages, it's super important to

1076
01:38:08,416 --> 01:38:10,250
make a decision at that point.

1077
01:38:10,250 --> 01:38:12,000
Like, do you drop the message

1078
01:38:12,000 --> 01:38:14,125
or do you retry reprocess it?

1079
01:38:14,458 --> 01:38:14,791
Right.

1080
01:38:14,791 --> 01:38:17,208
You need to be able to make this decision

1081
01:38:17,208 --> 01:38:18,833
for every single error case.

1082
01:38:19,791 --> 01:38:21,541
And you know, you just have effect dot

1083
01:38:21,541 --> 01:38:24,375
catch tags and then you have like a big

1084
01:38:24,583 --> 01:38:26,375
dictionary, like a big, big object

1085
01:38:26,375 --> 01:38:27,916
containing the tag of

1086
01:38:27,916 --> 01:38:29,541
the error on the left side.

1087
01:38:30,208 --> 01:38:33,666
And the error handling basically die

1088
01:38:33,666 --> 01:38:36,166
or, or succeed with some error

1089
01:38:36,166 --> 01:38:37,291
logging or whatever.

1090
01:38:37,291 --> 01:38:38,750
So if you die, Kafka

1091
01:38:38,750 --> 01:38:40,208
will reprocess the message.

1092
01:38:40,458 --> 01:38:42,791
If you, if you succeed and you log it,

1093
01:38:42,791 --> 01:38:45,041
well, you can either put it into

1094
01:38:45,500 --> 01:38:47,833
like a dead letter queue or something.

1095
01:38:47,833 --> 01:38:49,166
If you want to keep

1096
01:38:49,166 --> 01:38:50,541
those messages around.

1097
01:38:51,208 --> 01:38:53,208
But if that's not necessarily

1098
01:38:53,208 --> 01:38:54,000
important because

1099
01:38:54,000 --> 01:38:55,125
it's like time sensitive

1100
01:38:55,333 --> 01:38:58,166
and if you don't process it now, then it

1101
01:38:58,166 --> 01:38:59,541
doesn't make sense to process it like

1102
01:38:59,708 --> 01:39:01,375
five days later, then you

1103
01:39:01,375 --> 01:39:02,458
just discard the message.

1104
01:39:03,291 --> 01:39:06,791
And before I would normally implement

1105
01:39:06,791 --> 01:39:10,375
Kafka consumers like in Ruby or maybe in

1106
01:39:10,375 --> 01:39:14,000
fp-ts, it was also, it was better, but I

1107
01:39:14,000 --> 01:39:16,541
don't think I had it to this level

1108
01:39:16,625 --> 01:39:18,625
of granularity because what we ended up

1109
01:39:18,625 --> 01:39:21,208
doing in fp-ts was taking like the

1110
01:39:21,208 --> 01:39:23,375
shortcut route where we would just return

1111
01:39:23,375 --> 01:39:25,250
a generic error interface.

1112
01:39:25,416 --> 01:39:26,708
Just to have like, yeah, you

1113
01:39:26,708 --> 01:39:29,125
know, it can error, but we didn't know

1114
01:39:29,125 --> 01:39:31,250
what kind of error later on as I got

1115
01:39:31,250 --> 01:39:33,208
better with fp-ts, then obviously you

1116
01:39:33,208 --> 01:39:34,750
would have different types of errors,

1117
01:39:34,750 --> 01:39:35,916
which would also compose.

1118
01:39:36,166 --> 01:39:38,291
but I haven't written a Kafka

1119
01:39:38,291 --> 01:39:39,541
consumer with that,

1120
01:39:39,541 --> 01:39:41,333
approach in fp-ts,

1121
01:39:41,333 --> 01:39:43,500
but with Effect, it was just like so easy

1122
01:39:43,500 --> 01:39:47,583
and it's so useful because you don't

1123
01:39:47,583 --> 01:39:51,833
think about all these different kinds of,

1124
01:39:51,833 --> 01:39:54,958
ways your program can fail.

1125
01:39:54,958 --> 01:39:57,125
And my consumer is very simple.

1126
01:39:57,375 --> 01:39:58,833
It receives a message.

1127
01:39:59,208 --> 01:40:00,375
It parses it.

1128
01:40:00,416 --> 01:40:02,125
writes an event and

1129
01:40:02,125 --> 01:40:03,250
then calls another service.

1130
01:40:03,666 --> 01:40:07,000
So basically three things, but there's

1131
01:40:07,000 --> 01:40:10,291
like 15 or 20 different ways it can fail.

1132
01:40:10,625 --> 01:40:12,791
And it's just like, wow, now I know

1133
01:40:12,791 --> 01:40:14,791
everything every single way, how it can

1134
01:40:14,791 --> 01:40:15,125
fail

1135
01:40:15,125 --> 01:40:16,666
so what took me the most

1136
01:40:16,666 --> 01:40:20,000
time was thinking about whether to

1137
01:40:20,000 --> 01:40:22,916
discard or reprocess the message in the

1138
01:40:22,916 --> 01:40:23,750
whole implementation

1139
01:40:23,750 --> 01:40:25,875
proportionally the most time,

1140
01:40:25,875 --> 01:40:27,041
but that makes a lot of sense.

1141
01:40:27,041 --> 01:40:28,625
And I think that makes a difference

1142
01:40:28,625 --> 01:40:30,791
between resilient and

1143
01:40:30,791 --> 01:40:32,583
non-resilient software.

1144
01:40:33,333 --> 01:40:35,458
I think a lot of TypeScript programmers

1145
01:40:35,458 --> 01:40:39,875
are blissfully ignorant of the

1146
01:40:40,500 --> 01:40:44,041
unhappy path of a program, but this is

1147
01:40:44,041 --> 01:40:46,875
what ultimately makes your users very

1148
01:40:46,958 --> 01:40:49,375
unhappy if stuff goes wrong.

1149
01:40:49,708 --> 01:40:51,416
and a lot of times that is completely

1150
01:40:51,416 --> 01:40:52,333
unrelated to whether

1151
01:40:52,333 --> 01:40:54,375
the user has done something wrong as

1152
01:40:54,375 --> 01:40:56,750
whether your servers have a bad day or

1153
01:40:56,833 --> 01:40:58,916
whether you've migrated some infra and

1154
01:40:58,916 --> 01:41:01,416
like some things is like hitting capacity

1155
01:41:02,083 --> 01:41:04,625
or you're just hitting a blip somewhere

1156
01:41:04,625 --> 01:41:08,583
and things go wrong and a user gets like

1157
01:41:08,583 --> 01:41:12,125
an endless spinner or gets like undefined

1158
01:41:12,125 --> 01:41:13,541
is not a function in their face.

1159
01:41:14,000 --> 01:41:15,916
This is where like some backend

1160
01:41:15,916 --> 01:41:17,416
engineers haven't done their homework.

1161
01:41:17,750 --> 01:41:19,500
And I get it.

1162
01:41:19,500 --> 01:41:21,250
It's really tricky.

1163
01:41:21,583 --> 01:41:23,708
If you, if you're just like dealing

1164
01:41:23,708 --> 01:41:26,125
with like catch error and then

1165
01:41:26,125 --> 01:41:27,750
you have an any or unknown

1166
01:41:27,750 --> 01:41:29,791
thing and what do you do with it?

1167
01:41:29,791 --> 01:41:32,750
Yeah, maybe you bubble it around, maybe

1168
01:41:32,750 --> 01:41:36,625
you log it, but to work with it as

1169
01:41:36,625 --> 01:41:39,166
nicely as like structured type data that

1170
01:41:39,166 --> 01:41:40,958
you return from a function, that's what

1171
01:41:41,083 --> 01:41:42,875
you get with Effect and

1172
01:41:42,875 --> 01:41:44,958
you can handle it so nicely.

1173
01:41:45,291 --> 01:41:46,166
That was actually fun to

1174
01:41:46,166 --> 01:41:48,083
deal with the non happy path.

1175
01:41:48,708 --> 01:41:49,000
Yes.

1176
01:41:49,208 --> 01:41:49,625
And I think you

1177
01:41:49,625 --> 01:41:51,250
touched upon it very well.

1178
01:41:51,250 --> 01:41:51,875
It's fun.

1179
01:41:52,583 --> 01:41:56,250
You don't feel like it's something that

1180
01:41:56,250 --> 01:41:59,250
you have to do, but the language or the

1181
01:41:59,250 --> 01:42:01,208
library like doesn't really provide a

1182
01:42:01,208 --> 01:42:02,833
good way for you to manage.

1183
01:42:02,833 --> 01:42:04,041
And then it's like just a headache.

1184
01:42:04,208 --> 01:42:05,750
It's really fun.

1185
01:42:05,750 --> 01:42:07,875
To handle these cases in Effect.

1186
01:42:08,833 --> 01:42:12,833
And it just has such a great effect on,

1187
01:42:12,833 --> 01:42:16,125
on your reliability, on the

1188
01:42:16,125 --> 01:42:17,750
reliability of your software.

1189
01:42:18,666 --> 01:42:22,416
The other thing that I noticed was also

1190
01:42:22,416 --> 01:42:23,041
in terms of

1191
01:42:23,041 --> 01:42:25,291
maintainability and testability,

1192
01:42:25,541 --> 01:42:27,666
like the dependency injection,

1193
01:42:27,666 --> 01:42:29,458
like dependency management as well.

1194
01:42:30,083 --> 01:42:33,083
It's just so great with effect.

1195
01:42:33,375 --> 01:42:34,875
I don't have to worry

1196
01:42:34,875 --> 01:42:37,750
about mocking things extensively.

1197
01:42:38,208 --> 01:42:41,250
I just build a fake dependency and

1198
01:42:41,250 --> 01:42:43,250
provide that instead of, instead

1199
01:42:43,250 --> 01:42:44,791
of the real one, the live one.

1200
01:42:44,958 --> 01:42:48,833
And I feel like I'm much more

1201
01:42:48,833 --> 01:42:50,625
incentivized to write unit

1202
01:42:50,625 --> 01:42:53,625
tests and I don't know how other people

1203
01:42:53,625 --> 01:42:57,125
think about engineers at companies like

1204
01:42:57,416 --> 01:42:59,625
Zendesk and like Facebook and Google,

1205
01:42:59,625 --> 01:43:02,666
like big, big companies, like how they

1206
01:43:02,750 --> 01:43:03,583
deal with these things

1207
01:43:03,583 --> 01:43:03,958
deal with these things

1208
01:43:03,958 --> 01:43:05,666
on a day-to-day basis.

1209
01:43:06,166 --> 01:43:07,458
In the end, like it doesn't matter

1210
01:43:07,458 --> 01:43:10,541
how skillful or experienced you are.

1211
01:43:11,041 --> 01:43:12,916
It comes down to incentives all the time.

1212
01:43:13,000 --> 01:43:15,625
Like you do things that you

1213
01:43:15,625 --> 01:43:17,625
are more incentivized to do.

1214
01:43:17,833 --> 01:43:21,500
So if a language or a framework or a

1215
01:43:21,500 --> 01:43:22,583
library makes

1216
01:43:22,583 --> 01:43:24,625
something really easy to do,

1217
01:43:24,833 --> 01:43:27,041
you will do it regardless, whether it's

1218
01:43:27,041 --> 01:43:28,041
the right thing to do

1219
01:43:28,041 --> 01:43:29,166
or the wrong thing to do.

1220
01:43:29,375 --> 01:43:30,458
It's just like this.

1221
01:43:30,916 --> 01:43:32,791
I don't know if there's like a law or

1222
01:43:32,791 --> 01:43:33,583
this, but it's

1223
01:43:33,583 --> 01:43:35,708
definitely a psychological effect.

1224
01:43:36,125 --> 01:43:38,416
This, this is one of my favorites

1225
01:43:38,416 --> 01:43:39,375
paradigms or

1226
01:43:39,375 --> 01:43:41,708
guidelines in programming

1227
01:43:42,000 --> 01:43:45,375
or in life, in principle,

1228
01:43:45,708 --> 01:43:47,583
which is like make the right thing easy.

1229
01:43:48,291 --> 01:43:51,500
And that is, I think Effect makes

1230
01:43:51,500 --> 01:43:54,333
some really hard things

1231
01:43:54,333 --> 01:43:55,875
that are the right thing

1232
01:43:56,375 --> 01:43:58,083
as easy as they can be.

1233
01:43:58,375 --> 01:44:02,083
And so easy that it's fun doing things

1234
01:44:02,083 --> 01:44:04,750
like error handling or structuring

1235
01:44:04,750 --> 01:44:06,958
the hierarchy of your program in a

1236
01:44:06,958 --> 01:44:10,166
nice way, in the as nice way as you could

1237
01:44:10,166 --> 01:44:12,541
possibly do it in TypeScript, that's a

1238
01:44:12,541 --> 01:44:13,875
huge lift and that's

1239
01:44:13,875 --> 01:44:15,125
what Effect enables you.

1240
01:44:15,333 --> 01:44:16,166
And I think sounds

1241
01:44:16,166 --> 01:44:17,458
like dependency injection.

1242
01:44:17,708 --> 01:44:20,458
That's probably if you're in your Effect

1243
01:44:20,458 --> 01:44:22,666
adoption journey, that typically happens

1244
01:44:22,666 --> 01:44:25,041
sort of like maybe in the second week

1245
01:44:25,041 --> 01:44:26,458
when you're using Effect

1246
01:44:26,458 --> 01:44:27,666
after you've like rewritten

1247
01:44:27,875 --> 01:44:29,083
a whole bunch of like

1248
01:44:29,083 --> 01:44:31,000
promise code, et cetera.

1249
01:44:31,125 --> 01:44:33,458
Maybe you've now like finally cleaned up

1250
01:44:33,458 --> 01:44:34,416
some of your tech depth

1251
01:44:34,416 --> 01:44:35,625
around error handling.

1252
01:44:36,458 --> 01:44:38,333
And then you realize, okay, there's still

1253
01:44:38,333 --> 01:44:38,833
like some

1254
01:44:38,875 --> 01:44:40,500
global state we mutate

1255
01:44:40,541 --> 01:44:43,125
to kind of pass things around, or we just

1256
01:44:43,125 --> 01:44:45,416
have like this big blob of

1257
01:44:45,416 --> 01:44:46,708
like properties we're

1258
01:44:46,708 --> 01:44:47,875
like kind of pulling

1259
01:44:47,875 --> 01:44:49,041
through like all of

1260
01:44:49,041 --> 01:44:50,541
our function vacations.

1261
01:44:50,708 --> 01:44:52,708
Or maybe we have this like monster

1262
01:44:52,708 --> 01:44:55,500
monstrous context object,

1263
01:44:55,500 --> 01:44:57,333
which maybe has a whole bunch

1264
01:44:57,333 --> 01:45:00,000
of like, either it's untyped or it has a

1265
01:45:00,000 --> 01:45:00,833
whole bunch of like

1266
01:45:00,833 --> 01:45:02,416
nullable properties and you

1267
01:45:02,416 --> 01:45:04,458
kinda pray that it's there.

1268
01:45:04,500 --> 01:45:07,291
That's like all like CME principles.

1269
01:45:07,541 --> 01:45:08,958
I'd argue this, the most principled

1270
01:45:08,958 --> 01:45:10,291
approach about that is

1271
01:45:10,291 --> 01:45:12,583
like having like a bag of

1272
01:45:12,583 --> 01:45:14,458
properties that you just like lift

1273
01:45:14,458 --> 01:45:15,541
through your function

1274
01:45:15,541 --> 01:45:17,583
calls, but Effect gives you

1275
01:45:17,583 --> 01:45:18,625
the best of both worlds.

1276
01:45:18,875 --> 01:45:20,375
It gives you a very principled approach

1277
01:45:20,375 --> 01:45:22,833
and a very convenient approach.

1278
01:45:22,833 --> 01:45:23,791
And I think dependency

1279
01:45:23,791 --> 01:45:26,291
injection has a kind of a bad rap.

1280
01:45:26,583 --> 01:45:27,166
I've used it in

1281
01:45:27,166 --> 01:45:28,666
various programming language.

1282
01:45:28,666 --> 01:45:29,916
I've used it like a lot

1283
01:45:29,916 --> 01:45:31,541
of in PHP in the past.

1284
01:45:31,541 --> 01:45:34,125
I've used it like in GoLang and

1285
01:45:34,125 --> 01:45:35,375
other programming languages.

1286
01:45:35,625 --> 01:45:39,250
It never, it felt like, okay, this is how

1287
01:45:39,250 --> 01:45:40,583
things should kind

1288
01:45:40,583 --> 01:45:41,625
of, there is a solution

1289
01:45:41,791 --> 01:45:43,791
somewhere there, but all the solutions

1290
01:45:43,791 --> 01:45:45,416
I've used so far where

1291
01:45:45,416 --> 01:45:46,541
it kind of like had such

1292
01:45:46,666 --> 01:45:48,875
big foot guns that at some point I said

1293
01:45:48,875 --> 01:45:50,916
like, okay, no, I've hurt myself too much

1294
01:45:50,916 --> 01:45:51,333
with that.

1295
01:45:51,666 --> 01:45:53,125
I'll do it manually.

1296
01:45:53,125 --> 01:45:55,833
And I think Effect finally gives you the

1297
01:45:55,833 --> 01:45:56,916
cake and lets you eat it.

1298
01:45:57,541 --> 01:45:58,625
And I think that's

1299
01:45:58,625 --> 01:46:00,000
really hard to explain.

1300
01:46:00,000 --> 01:46:01,708
And I think you have to build a little

1301
01:46:01,708 --> 01:46:03,500
thing, refactor it and

1302
01:46:03,500 --> 01:46:05,375
like, then throw in a

1303
01:46:05,375 --> 01:46:06,958
little bit of like type save context,

1304
01:46:06,958 --> 01:46:08,875
which is all there is to it.

1305
01:46:08,875 --> 01:46:09,208
Really.

1306
01:46:09,208 --> 01:46:10,750
It's like react context,

1307
01:46:10,750 --> 01:46:12,500
but type save and much nicer.

1308
01:46:12,875 --> 01:46:14,541
So that's, I think something you have to

1309
01:46:14,541 --> 01:46:15,750
try for yourself to

1310
01:46:15,750 --> 01:46:17,875
see that how nice it is.

1311
01:46:18,125 --> 01:46:18,708
But I agree.

1312
01:46:18,708 --> 01:46:20,458
This is one of the best things about it.

1313
01:46:20,833 --> 01:46:21,541
Yeah, absolutely.

1314
01:46:22,125 --> 01:46:24,875
And why does it have a bad rep

1315
01:46:24,875 --> 01:46:25,333
if I think

1316
01:46:25,333 --> 01:46:26,583
about it, I think it's

1317
01:46:26,666 --> 01:46:28,125
again, comes down to incentives.

1318
01:46:28,500 --> 01:46:30,875
If the language makes it hard to do

1319
01:46:30,875 --> 01:46:31,833
dependency injection,

1320
01:46:32,291 --> 01:46:33,666
because it's never just a

1321
01:46:33,666 --> 01:46:35,500
singular case, like, Oh, I'm going to do

1322
01:46:35,500 --> 01:46:37,166
dependency injection on this function.

1323
01:46:37,750 --> 01:46:40,041
And this one function will be, you know,

1324
01:46:40,250 --> 01:46:41,625
they're written the right way.

1325
01:46:41,875 --> 01:46:44,041
Well, you know, your program usually has

1326
01:46:44,041 --> 01:46:46,125
a certain depth, like there's like a

1327
01:46:46,125 --> 01:46:48,083
function and then that function calls out

1328
01:46:48,083 --> 01:46:49,125
that of other functions.

1329
01:46:49,708 --> 01:46:51,541
Those functions call out other functions.

1330
01:46:51,541 --> 01:46:53,458
And then the dependency needs to travel

1331
01:46:53,458 --> 01:46:54,958
all the way down because it's

1332
01:46:54,958 --> 01:46:56,083
called somewhere at the leaf.

1333
01:46:56,500 --> 01:46:58,458
For example, a database call is made

1334
01:46:58,458 --> 01:47:00,833
somewhere at the leaf of our program and

1335
01:47:01,291 --> 01:47:04,041
wiring through all these layers and then

1336
01:47:04,041 --> 01:47:07,083
adding the dependency in the list of

1337
01:47:07,333 --> 01:47:08,958
arguments all the time.

1338
01:47:09,166 --> 01:47:10,250
Well, I'm not surprised

1339
01:47:10,250 --> 01:47:12,833
that people get tired of it.

1340
01:47:12,958 --> 01:47:14,625
And I started thinking about it a few

1341
01:47:14,625 --> 01:47:16,250
weeks ago, you know, like, what are these

1342
01:47:16,541 --> 01:47:17,041
approaches?

1343
01:47:17,291 --> 01:47:19,958
And I started calling them just

1344
01:47:19,958 --> 01:47:21,708
internally for myself,

1345
01:47:22,000 --> 01:47:23,291
my own, for my own sake.

1346
01:47:23,750 --> 01:47:25,500
Like there's this explicit dependency

1347
01:47:25,500 --> 01:47:27,291
injection where you like to do all the

1348
01:47:27,291 --> 01:47:28,583
wiring and like yourself.

1349
01:47:29,333 --> 01:47:31,375
Then there's some languages like Scala,

1350
01:47:31,833 --> 01:47:35,416
which somehow give you like some, some

1351
01:47:35,416 --> 01:47:37,666
language features, which allow you to

1352
01:47:37,666 --> 01:47:39,958
implicitly wire through it.

1353
01:47:40,208 --> 01:47:41,875
You need to have a big brain for that.

1354
01:47:42,041 --> 01:47:44,041
And it feels a little bit magical, right?

1355
01:47:44,041 --> 01:47:46,583
This implicit dependency injection.

1356
01:47:47,208 --> 01:47:47,958
I don't know if it's

1357
01:47:47,958 --> 01:47:48,875
through traits or something.

1358
01:47:48,916 --> 01:47:51,083
I'm not a big Scala user,

1359
01:47:51,083 --> 01:47:52,833
but I did see some, some of it.

1360
01:47:53,541 --> 01:47:56,041
And then you have Effect, which is like,

1361
01:47:56,333 --> 01:47:58,041
it's somewhere in the middle.

1362
01:47:58,041 --> 01:48:00,291
Like it's, it's kind of implicit, but

1363
01:48:00,291 --> 01:48:02,375
it's also very explicit in a sense.

1364
01:48:02,833 --> 01:48:05,125
Like you, you do declare, you see where

1365
01:48:05,125 --> 01:48:08,500
you inject the dependency by providing

1366
01:48:08,500 --> 01:48:09,291
the implementation.

1367
01:48:09,833 --> 01:48:11,791
And then you also see the place where

1368
01:48:11,791 --> 01:48:14,125
you're calling the functions and the

1369
01:48:14,125 --> 01:48:17,041
stuff that's on the dependency because

1370
01:48:17,041 --> 01:48:20,250
you have to yield it or yield star.

1371
01:48:20,750 --> 01:48:22,958
So it's, it's kind of implicit because

1372
01:48:22,958 --> 01:48:24,708
you don't have to wire it manually.

1373
01:48:25,291 --> 01:48:27,750
You just use it at the, at the, at the

1374
01:48:27,750 --> 01:48:28,750
site where you need it.

1375
01:48:29,291 --> 01:48:31,500
I think it's the best of both worlds in a

1376
01:48:31,500 --> 01:48:32,666
very similar way.

1377
01:48:32,666 --> 01:48:35,750
How I think TypeScript is the best of

1378
01:48:35,750 --> 01:48:38,833
both worlds where it very elegantly

1379
01:48:38,916 --> 01:48:40,666
does type inference in

1380
01:48:40,666 --> 01:48:42,708
most places where you can.

1381
01:48:42,875 --> 01:48:44,750
a lot of static languages,

1382
01:48:44,750 --> 01:48:47,666
like ask you to write type annotations

1383
01:48:47,916 --> 01:48:51,458
everywhere, and that I think also causes

1384
01:48:51,458 --> 01:48:53,458
like some fatigue when

1385
01:48:53,458 --> 01:48:54,583
you use a typed language.

1386
01:48:55,041 --> 01:48:57,208
And I think TypeScript makes it so nice

1387
01:48:57,208 --> 01:48:59,000
that you can get away with

1388
01:48:59,000 --> 01:49:00,708
like just type annotations in

1389
01:49:00,708 --> 01:49:02,166
the minimum amount of places.

1390
01:49:02,791 --> 01:49:05,166
Sometimes even for argument types, if you

1391
01:49:05,166 --> 01:49:06,750
have a default value, for example.

1392
01:49:07,375 --> 01:49:10,125
So most things where possible can be

1393
01:49:10,125 --> 01:49:11,791
inferred and that's totally fine.

1394
01:49:12,125 --> 01:49:15,041
And so think about the context, the type

1395
01:49:15,041 --> 01:49:16,916
dependencies of an Effect of a

1396
01:49:16,916 --> 01:49:18,791
function, think about it the same way like

1397
01:49:18,791 --> 01:49:19,416
if it's

1398
01:49:19,416 --> 01:49:20,791
used, it can be inferred.

1399
01:49:21,208 --> 01:49:23,291
If you return something from a function

1400
01:49:23,291 --> 01:49:26,541
that looks like an object with a property

1401
01:49:27,166 --> 01:49:29,750
user, then the type can be inferred.

1402
01:49:29,958 --> 01:49:31,250
That's because you return it.

1403
01:49:31,958 --> 01:49:33,708
And what's so cool about Effect is

1404
01:49:33,708 --> 01:49:36,208
like, if you use a thing in a function

1405
01:49:36,916 --> 01:49:39,041
and using, like you said, like if you

1406
01:49:39,041 --> 01:49:41,500
yield something, so the equivalent

1407
01:49:41,708 --> 01:49:45,291
of like an await, then Effect and like a,

1408
01:49:45,291 --> 01:49:47,875
on the type level wires things up

1409
01:49:47,875 --> 01:49:50,500
nicely with TypeScript that in the type

1410
01:49:50,500 --> 01:49:52,833
signature, you say like, aha, here

1411
01:49:53,000 --> 01:49:54,875
we need the database client.

1412
01:49:55,375 --> 01:49:58,583
And also during runtime makes sure,

1413
01:49:58,583 --> 01:50:00,166
okay, there's behind the

1414
01:50:00,166 --> 01:50:01,875
scenes, the context objects where we have

1415
01:50:01,875 --> 01:50:02,666
the database client.

1416
01:50:02,666 --> 01:50:04,833
So it picks it up and not just even that,

1417
01:50:04,833 --> 01:50:07,333
but also when you finally get to run your

1418
01:50:07,333 --> 01:50:10,458
program, it makes sure that at some point

1419
01:50:10,458 --> 01:50:13,625
you supply your database client.

1420
01:50:13,833 --> 01:50:16,833
And I think that is so elegant when you,

1421
01:50:16,833 --> 01:50:18,833
when you use it, but it's, it's hard to

1422
01:50:19,083 --> 01:50:20,875
to kind of grasp it if you, if you

1423
01:50:20,875 --> 01:50:22,791
haven't take a look at that with

1424
01:50:22,791 --> 01:50:25,208
code and like try to refactor a little

1425
01:50:25,208 --> 01:50:26,583
something, but I agree.

1426
01:50:26,583 --> 01:50:27,166
It's one of the most

1427
01:50:27,166 --> 01:50:28,375
elegant things about Effect.

1428
01:50:29,000 --> 01:50:29,541
Absolutely.

1429
01:50:29,833 --> 01:50:30,500
People just have to

1430
01:50:30,500 --> 01:50:31,625
get their hands dirty.

1431
01:50:31,916 --> 01:50:33,833
There's no other way of learning and

1432
01:50:33,833 --> 01:50:34,708
understanding Effect.

1433
01:50:34,916 --> 01:50:36,583
Like obviously you could read the

1434
01:50:36,583 --> 01:50:38,625
documentation all day long, but then

1435
01:50:38,625 --> 01:50:40,250
you get fatigued because there's just so

1436
01:50:40,250 --> 01:50:42,000
much that Effect provides.

1437
01:50:42,458 --> 01:50:44,500
I often see people being very confused

1438
01:50:44,500 --> 01:50:45,625
about what is Effect?

1439
01:50:45,833 --> 01:50:47,000
Like, "I don't understand it.

1440
01:50:47,000 --> 01:50:48,750
it seems to do

1441
01:50:48,750 --> 01:50:51,291
everything", because it's such a big

1442
01:50:51,291 --> 01:50:54,500
departure from the tiny libraries with

1443
01:50:54,500 --> 01:50:57,125
very well-defined responsibility

1444
01:50:57,125 --> 01:50:58,833
in the JavaScript ecosystem.

1445
01:50:59,000 --> 01:51:00,875
And then you can like pick and choose and

1446
01:51:00,875 --> 01:51:03,666
you can build your own tech stack,

1447
01:51:03,666 --> 01:51:05,875
upon certain libraries, and then that's

1448
01:51:05,875 --> 01:51:08,041
your definition of production

1449
01:51:08,041 --> 01:51:09,583
grade software, but then

1450
01:51:09,583 --> 01:51:10,666
you have Effect, which seems

1451
01:51:10,708 --> 01:51:12,208
to be like the glue code.

1452
01:51:12,541 --> 01:51:14,125
It's a really a generic

1453
01:51:14,125 --> 01:51:15,125
programming framework

1454
01:51:15,750 --> 01:51:16,166
Right.

1455
01:51:16,166 --> 01:51:18,666
And I suppose in a parallel universe

1456
01:51:18,666 --> 01:51:20,958
Effect would have been a different

1457
01:51:21,000 --> 01:51:23,708
programming language, but I think

1458
01:51:23,708 --> 01:51:26,083
now we sort of have the best of both

1459
01:51:26,125 --> 01:51:28,541
worlds in that regard as well, because

1460
01:51:28,541 --> 01:51:30,208
TypeScript is darn good.

1461
01:51:30,416 --> 01:51:32,541
Like, and so many people

1462
01:51:32,541 --> 01:51:34,041
already love TypeScript.

1463
01:51:34,041 --> 01:51:34,708
I love it.

1464
01:51:34,750 --> 01:51:37,250
It has so much structure and has so much

1465
01:51:37,250 --> 01:51:39,458
amazing tooling around it.

1466
01:51:39,458 --> 01:51:41,958
VS code just works super well with it.

1467
01:51:41,958 --> 01:51:43,333
You have like LSPs that

1468
01:51:43,333 --> 01:51:44,916
work in other places.

1469
01:51:44,916 --> 01:51:47,000
So at this point, you need to have a very

1470
01:51:47,000 --> 01:51:48,708
good reason to create a new

1471
01:51:48,708 --> 01:51:50,833
program language, and I think good

1472
01:51:50,833 --> 01:51:53,416
reasons could be superior runtime

1473
01:51:53,416 --> 01:51:56,083
performance, what like Rust is giving you

1474
01:51:56,083 --> 01:51:59,291
or what other program languages give you.

1475
01:51:59,541 --> 01:52:02,041
But if you can't provide those unfair

1476
01:52:02,041 --> 01:52:03,541
advantages, then I think you

1477
01:52:03,541 --> 01:52:05,250
gotta stick with TypeScript for now.

1478
01:52:05,666 --> 01:52:07,375
And TypeScript is so elegant and

1479
01:52:07,375 --> 01:52:10,125
so flexible that you can bring all of

1480
01:52:10,125 --> 01:52:12,958
those semantics that you would get from

1481
01:52:12,958 --> 01:52:15,125
something like reason or a re-script.

1482
01:52:15,458 --> 01:52:16,166
But you can bring it

1483
01:52:16,166 --> 01:52:17,458
directly into TypeScript.

1484
01:52:17,458 --> 01:52:18,791
This is where Effect has

1485
01:52:18,791 --> 01:52:20,250
struck this really nice balance.

1486
01:52:20,875 --> 01:52:22,833
But I agree you need to rewire

1487
01:52:22,833 --> 01:52:23,875
your brain a little bit.

1488
01:52:24,375 --> 01:52:25,541
And people maybe

1489
01:52:25,541 --> 01:52:27,166
don't immediately get it.

1490
01:52:27,458 --> 01:52:29,166
And I've seen an interesting correlation

1491
01:52:29,166 --> 01:52:31,458
that people have the easiest time

1492
01:52:31,458 --> 01:52:33,375
getting what Effect is about if they've

1493
01:52:33,375 --> 01:52:36,541
experienced the problems that Effect

1494
01:52:36,583 --> 01:52:39,000
solves before and they

1495
01:52:39,000 --> 01:52:40,583
have sort of like a lot of scar tissue

1496
01:52:40,916 --> 01:52:43,791
from trying to solve those problems

1497
01:52:43,791 --> 01:52:45,625
themselves, like trying to do proper

1498
01:52:45,625 --> 01:52:47,208
error handling, trying to do

1499
01:52:47,208 --> 01:52:49,541
observability, trying to do interruption.

1500
01:52:49,708 --> 01:52:50,291
What you've mentioned

1501
01:52:50,291 --> 01:52:51,541
before with Kubernetes.

1502
01:52:52,166 --> 01:52:55,791
So the more problems an engineer has

1503
01:52:55,791 --> 01:52:57,500
experienced in the past, particularly

1504
01:52:57,625 --> 01:52:59,375
TypeScript engineer, I feel like

1505
01:52:59,375 --> 01:52:59,916
for them

1506
01:52:59,916 --> 01:53:00,958
Effect clicks

1507
01:53:00,958 --> 01:53:03,750
most quickly, but yeah, I'm curious, what

1508
01:53:03,750 --> 01:53:05,458
was the experience talking to other

1509
01:53:05,458 --> 01:53:07,041
engineers at Zendesk so far?

1510
01:53:07,375 --> 01:53:09,625
What have they been confused about?

1511
01:53:09,625 --> 01:53:10,750
What has clicked for them?

1512
01:53:11,000 --> 01:53:13,125
So far I mostly talked through

1513
01:53:13,125 --> 01:53:14,250
my own experience.

1514
01:53:15,041 --> 01:53:18,791
Then I had my immediate team members and,

1515
01:53:19,083 --> 01:53:21,083
with them, obviously it's a journey

1516
01:53:21,083 --> 01:53:23,250
because, they have to learn it.

1517
01:53:23,250 --> 01:53:25,750
It's also different from fp-ts.

1518
01:53:25,750 --> 01:53:27,333
Also fp-ts, they didn't

1519
01:53:27,333 --> 01:53:29,333
really bother learning that much.

1520
01:53:29,625 --> 01:53:32,291
Like as long as they could kind of

1521
01:53:32,291 --> 01:53:34,750
understand in terms of the code

1522
01:53:34,750 --> 01:53:36,500
review, what's going on, that was

1523
01:53:36,500 --> 01:53:38,208
already a good enough level for them,

1524
01:53:38,375 --> 01:53:40,583
To be productive and

1525
01:53:40,583 --> 01:53:41,583
help me with the reviews.

1526
01:53:41,583 --> 01:53:46,208
If I write some code, also my team in the

1527
01:53:46,208 --> 01:53:50,666
past one, two years, like we've had this

1528
01:53:50,666 --> 01:53:52,000
unfortunate situation where

1529
01:53:52,000 --> 01:53:53,541
we had some churn in the team.

1530
01:53:53,541 --> 01:53:56,291
So often I was like the only backend

1531
01:53:56,291 --> 01:53:57,916
engineer on the team while being

1532
01:53:57,916 --> 01:53:58,833
the tech lead as well.

1533
01:53:59,125 --> 01:54:01,875
So I really needed like my front end

1534
01:54:01,875 --> 01:54:03,958
engineers to be able to review my

1535
01:54:04,125 --> 01:54:06,666
code, and Effect is just doing

1536
01:54:06,666 --> 01:54:08,375
really well in this regard as well.

1537
01:54:08,875 --> 01:54:12,333
Because once you have the generator

1538
01:54:12,333 --> 01:54:16,000
syntax, where you have the gen and

1539
01:54:16,000 --> 01:54:19,083
yeld star, which you can easily map

1540
01:54:19,083 --> 01:54:20,666
in your mind to async and

1541
01:54:20,666 --> 01:54:22,833
await, you can build up this

1542
01:54:22,833 --> 01:54:24,500
adapter layer, in this mental

1543
01:54:24,500 --> 01:54:26,541
model for you once that clicks,

1544
01:54:26,541 --> 01:54:30,041
it's very easy for them to review code.

1545
01:54:30,291 --> 01:54:32,208
I'm not talking about stuff like,

1546
01:54:32,208 --> 01:54:34,625
you know, database queries and, you

1547
01:54:34,625 --> 01:54:37,208
know, how to set up proper indices for,

1548
01:54:37,208 --> 01:54:39,583
for your table and like these backend

1549
01:54:39,666 --> 01:54:41,541
concerns, purely backend concerns, but

1550
01:54:41,541 --> 01:54:43,875
like all the business logic that you

1551
01:54:43,875 --> 01:54:45,375
write on the backend and there's a ton of

1552
01:54:45,375 --> 01:54:47,666
it, that's not an issue in terms of

1553
01:54:47,666 --> 01:54:48,000
review.

1554
01:54:48,458 --> 01:54:50,083
So that's sort of like the 10 second

1555
01:54:50,083 --> 01:54:52,333
onboarding like, Hey, this stuff going

1556
01:54:52,333 --> 01:54:53,375
to look a little bit weird.

1557
01:54:53,750 --> 01:54:55,791
Just everywhere you see yield, think

1558
01:54:55,791 --> 01:54:57,291
that's await everywhere.

1559
01:54:57,458 --> 01:54:59,458
You see that gen thing, I think that's

1560
01:54:59,458 --> 01:55:01,708
async and you should be able to like,

1561
01:55:01,708 --> 01:55:03,583
just read that code as like your

1562
01:55:03,583 --> 01:55:05,583
traditional async, await code go.

1563
01:55:06,041 --> 01:55:08,166
I think that is sort of like the hail

1564
01:55:08,166 --> 01:55:10,000
Mary 10 second onboarding

1565
01:55:10,208 --> 01:55:12,000
where someone can get really far.

1566
01:55:12,291 --> 01:55:12,916
Yeah, exactly.

1567
01:55:13,166 --> 01:55:15,833
And that's like totally

1568
01:55:15,833 --> 01:55:18,875
Pareto, like, this 20% of effort

1569
01:55:19,375 --> 01:55:21,125
gives you 80% of the results.

1570
01:55:21,458 --> 01:55:23,708
Like after that, obviously they're going

1571
01:55:23,708 --> 01:55:24,791
to have questions

1572
01:55:24,791 --> 01:55:26,333
like, what is this layer?

1573
01:55:27,166 --> 01:55:28,041
What is this runtime?

1574
01:55:29,041 --> 01:55:31,583
Uh, what do you do when you catch tags?

1575
01:55:31,583 --> 01:55:32,125
What are tags?

1576
01:55:32,791 --> 01:55:34,750
Like there will be questions like this,

1577
01:55:34,750 --> 01:55:38,166
but they're, and yeah, they require maybe

1578
01:55:38,291 --> 01:55:41,208
more nuanced explanations, not just

1579
01:55:41,208 --> 01:55:43,625
like a one-to-one mapping from a

1580
01:55:43,625 --> 01:55:45,375
new concept to a well-known

1581
01:55:45,375 --> 01:55:47,125
well-established other concept.

1582
01:55:47,333 --> 01:55:49,208
But, but it's that

1583
01:55:49,208 --> 01:55:52,875
20% of the, of, of the productivity

1584
01:55:53,333 --> 01:55:54,208
that you're achieving

1585
01:55:54,208 --> 01:55:55,875
with the 80% of the effort.

1586
01:55:56,166 --> 01:55:58,625
So already with the 10 second onboarding,

1587
01:55:58,625 --> 01:56:00,833
you're so far ahead that the

1588
01:56:00,833 --> 01:56:02,083
reviews just work already.

1589
01:56:02,416 --> 01:56:04,791
And then I like this idea of like,

1590
01:56:04,791 --> 01:56:06,208
exposing someone

1591
01:56:06,208 --> 01:56:07,375
to Effect first through

1592
01:56:07,375 --> 01:56:07,916
like reading

1593
01:56:07,916 --> 01:56:09,708
code and doing code review.

1594
01:56:09,750 --> 01:56:11,791
Since this is where someone through

1595
01:56:11,791 --> 01:56:13,541
the context that they are already

1596
01:56:13,541 --> 01:56:15,625
familiar with, maybe through a refactor,

1597
01:56:15,833 --> 01:56:18,250
maybe through a new feature, they

1598
01:56:18,250 --> 01:56:20,000
have all of the context that they need to

1599
01:56:20,000 --> 01:56:21,750
understand what the problem is about.

1600
01:56:22,208 --> 01:56:23,291
And now they can focus

1601
01:56:23,291 --> 01:56:24,041
on the implementation.

1602
01:56:24,916 --> 01:56:26,833
And I think what's also so nice is

1603
01:56:26,833 --> 01:56:28,500
depending on where someone

1604
01:56:28,500 --> 01:56:30,541
reviews the code, possibly ideally in

1605
01:56:30,541 --> 01:56:33,583
their IDE, this is where you can also

1606
01:56:33,750 --> 01:56:35,541
use all of like the type inference

1607
01:56:35,541 --> 01:56:38,500
benefits to help you understand

1608
01:56:38,500 --> 01:56:40,541
what's going on, if you hover over an

1609
01:56:40,541 --> 01:56:43,208
effect and see like, Oh, this is where

1610
01:56:43,583 --> 01:56:46,666
we can have an error that is about maybe

1611
01:56:46,666 --> 01:56:50,416
the user wasn't found or maybe

1612
01:56:50,416 --> 01:56:51,916
another service is done.

1613
01:56:52,375 --> 01:56:54,666
This can add so much to the picture to

1614
01:56:54,666 --> 01:56:56,166
understand what's going on.

1615
01:56:56,541 --> 01:56:58,500
Where before everything was just like,

1616
01:56:58,500 --> 01:57:01,083
an implicit sort of wake

1617
01:57:01,083 --> 01:57:03,958
thought, and I feel like this is where

1618
01:57:03,958 --> 01:57:06,166
someone just by also being exposed

1619
01:57:06,583 --> 01:57:08,125
can pick up so much.

1620
01:57:08,416 --> 01:57:10,458
And then you have seen at the end of the

1621
01:57:10,458 --> 01:57:13,125
day, a lot of code users are

1622
01:57:13,125 --> 01:57:14,416
very similar to each other.

1623
01:57:15,041 --> 01:57:17,625
And this is where in someone get now

1624
01:57:17,625 --> 01:57:19,125
takes that step to writing their own

1625
01:57:19,125 --> 01:57:21,541
Effect code, they probably have already

1626
01:57:21,541 --> 01:57:23,750
seen two or three places that are very

1627
01:57:23,750 --> 01:57:26,708
similar, so you can go copy some of that

1628
01:57:26,708 --> 01:57:29,458
code, go over there, adjust it, and

1629
01:57:29,541 --> 01:57:31,541
bring the usual programming muscle.

1630
01:57:31,958 --> 01:57:34,083
And it's works going to work just as well

1631
01:57:34,083 --> 01:57:35,375
and probably even better

1632
01:57:35,541 --> 01:57:37,208
since you have improved type safety.

1633
01:57:37,791 --> 01:57:38,541
Yeah, absolutely.

1634
01:57:39,458 --> 01:57:42,333
Also, I really love the way you can work

1635
01:57:42,333 --> 01:57:44,583
with generators because anything

1636
01:57:44,833 --> 01:57:47,583
that's within the function body of a

1637
01:57:47,583 --> 01:57:49,666
generator, it's basically your happy

1638
01:57:49,750 --> 01:57:52,041
path because all the error cases just

1639
01:57:52,041 --> 01:57:53,750
short circuit the happy path.

1640
01:57:54,250 --> 01:57:56,208
And then you just do a quick pipe after

1641
01:57:56,208 --> 01:57:57,416
the Effect where you

1642
01:57:57,416 --> 01:57:58,333
handle all the

1643
01:57:58,333 --> 01:58:00,291
possible failure cases.

1644
01:58:00,541 --> 01:58:03,833
And I don't know why, but I just love

1645
01:58:03,833 --> 01:58:06,000
this style of writing programs.

1646
01:58:06,500 --> 01:58:07,541
Here's my happy path.

1647
01:58:07,958 --> 01:58:10,041
Everybody can understand what's going on.

1648
01:58:10,375 --> 01:58:13,583
And then now in this pipe, I'm going to

1649
01:58:13,583 --> 01:58:14,375
handle all the errors.

1650
01:58:14,750 --> 01:58:15,083
Right.

1651
01:58:15,083 --> 01:58:16,958
This way can like, sprinkle a little bit

1652
01:58:16,958 --> 01:58:19,041
of like extra sauce on top of it, where

1653
01:58:19,041 --> 01:58:20,833
you can, I often do

1654
01:58:20,833 --> 01:58:22,416
also like timeouts there.

1655
01:58:22,750 --> 01:58:24,500
I add a little bit of like Otel

1656
01:58:24,500 --> 01:58:27,541
instrumentation around that, or maybe do

1657
01:58:27,583 --> 01:58:29,875
like a retry for an error

1658
01:58:29,875 --> 01:58:31,041
but yeah, as you say,

1659
01:58:31,041 --> 01:58:32,041
like in the generator,

1660
01:58:32,333 --> 01:58:34,125
this, and I think this is so beautiful

1661
01:58:34,125 --> 01:58:36,333
about it is like, you can nicely separate

1662
01:58:36,750 --> 01:58:39,083
sort of like signal from the other stuff

1663
01:58:39,083 --> 01:58:41,291
and say like, okay, here's my business

1664
01:58:41,291 --> 01:58:43,291
logic and here's like,

1665
01:58:43,291 --> 01:58:44,750
here are those other concerns.

1666
01:58:45,333 --> 01:58:47,791
I think like in the future, if we have

1667
01:58:47,791 --> 01:58:48,375
like a next

1668
01:58:48,375 --> 01:58:50,500
generation of IDEs, et cetera,

1669
01:58:50,500 --> 01:58:53,333
and maybe like even more AI assisted,

1670
01:58:53,333 --> 01:58:55,875
maybe that can help you and say like,

1671
01:58:55,916 --> 01:58:57,791
Hey, hide everything that is not about

1672
01:58:57,791 --> 01:58:59,375
the business logic or

1673
01:58:59,375 --> 01:59:00,541
hide everything that,

1674
01:59:00,833 --> 01:59:02,291
or like highlight everything that is

1675
01:59:02,291 --> 01:59:04,208
about concurrency or highlight everything

1676
01:59:04,208 --> 01:59:06,250
that is about error handling with Effect.

1677
01:59:06,250 --> 01:59:08,541
You already put in sort of like the

1678
01:59:08,541 --> 01:59:11,416
structural effort and I think we're going

1679
01:59:11,416 --> 01:59:13,750
to see some, some big rewards even beyond

1680
01:59:13,750 --> 01:59:15,083
what we have right now.

1681
01:59:16,125 --> 01:59:16,791
That's very interesting.

1682
01:59:16,791 --> 01:59:19,083
I never thought about this, but, uh, it

1683
01:59:19,083 --> 01:59:20,000
makes it enough sense.

1684
01:59:20,750 --> 01:59:21,083
Yeah.

1685
01:59:21,291 --> 01:59:23,291
The, the tooling that you can build on,

1686
01:59:23,291 --> 01:59:24,875
on, on top of these like static

1687
01:59:25,083 --> 01:59:26,000
descriptions of a

1688
01:59:26,000 --> 01:59:27,541
program is just like limitless.

1689
01:59:28,625 --> 01:59:28,791
Yeah.

1690
01:59:29,875 --> 01:59:30,083
Interesting.

1691
01:59:30,166 --> 01:59:30,291
Yeah.

1692
01:59:30,291 --> 01:59:31,500
This is something I'm

1693
01:59:31,500 --> 01:59:32,708
very, very excited about.

1694
01:59:33,000 --> 01:59:35,250
And we've, we talked briefly before about

1695
01:59:35,250 --> 01:59:37,041
the launch of the Effect Playground.

1696
01:59:37,041 --> 01:59:39,125
I think it's super nice to have like an

1697
01:59:39,125 --> 01:59:41,041
environment where it can just play

1698
01:59:41,041 --> 01:59:42,083
around a little bit, get

1699
01:59:42,083 --> 01:59:43,416
familiar with something.

1700
01:59:43,416 --> 01:59:45,541
I use it on a daily basis to maybe

1701
01:59:45,541 --> 01:59:48,166
understand an API surface a bit better

1702
01:59:48,666 --> 01:59:50,583
and just play around with it, have fun.

1703
01:59:50,583 --> 01:59:53,625
And we also threw in support for some of

1704
01:59:53,625 --> 01:59:55,583
the effect dev tools in there,

1705
01:59:55,583 --> 01:59:58,541
notably also the trace viewer.

1706
01:59:59,125 --> 02:00:01,041
And this is where you can get real time

1707
02:00:01,041 --> 02:00:03,166
feedback for what does it mean for

1708
02:00:03,166 --> 02:00:05,791
my program to run this is where it may be

1709
02:00:05,791 --> 02:00:08,041
a certain thing took like a second

1710
02:00:08,291 --> 02:00:11,041
and then should just time out, et

1711
02:00:11,041 --> 02:00:12,208
cetera, like visually

1712
02:00:12,208 --> 02:00:13,583
see what's going on.

1713
02:00:14,000 --> 02:00:16,083
There's so many tooling possibilities

1714
02:00:16,083 --> 02:00:17,833
that are coming.

1715
02:00:18,125 --> 02:00:20,375
And that's gonna just kind of like the

1716
02:00:20,375 --> 02:00:22,208
gift that keeps on giving as like

1717
02:00:22,208 --> 02:00:23,958
you adopt Effect, and there's like so

1718
02:00:23,958 --> 02:00:26,083
many benefits that just fall out of that.

1719
02:00:26,458 --> 02:00:28,250
I think we're still at the beginning and

1720
02:00:28,250 --> 02:00:31,125
it's already very rewarding for at

1721
02:00:31,125 --> 02:00:32,083
least in my experience

1722
02:00:32,083 --> 02:00:33,291
and what I've seen so far.

1723
02:00:33,791 --> 02:00:35,166
So you shared your

1724
02:00:35,166 --> 02:00:38,458
experience using an adopting Effect

1725
02:00:38,750 --> 02:00:42,791
and also how you help your own team adopt

1726
02:00:42,791 --> 02:00:44,333
Effect and be productive with it

1727
02:00:44,375 --> 02:00:46,458
through code reviews and helping them to

1728
02:00:46,458 --> 02:00:48,041
refactor code and build new Effect

1729
02:00:48,500 --> 02:00:49,250
programs.

1730
02:00:49,416 --> 02:00:51,750
But given that you built this service

1731
02:00:51,750 --> 02:00:53,916
framework that is used, I think all

1732
02:00:53,916 --> 02:00:55,791
across Zendesk when it comes to

1733
02:00:55,791 --> 02:00:58,208
TypeScript code, there's now more and more

1734
02:00:58,208 --> 02:00:59,958
people that are exposed to effect.

1735
02:01:00,250 --> 02:01:02,083
So how was their experience?

1736
02:01:02,208 --> 02:01:03,583
Maybe you got a little

1737
02:01:03,583 --> 02:01:04,916
bit of like questions.

1738
02:01:05,125 --> 02:01:06,416
What is that thing?

1739
02:01:06,833 --> 02:01:10,250
Uh, maybe some similar concerns that

1740
02:01:10,250 --> 02:01:12,291
people asked about fp-ts

1741
02:01:13,041 --> 02:01:15,166
So which sort of questions did you hear.

1742
02:01:16,041 --> 02:01:16,208
Yes.

1743
02:01:16,416 --> 02:01:18,250
Uh, well, that's a great question.

1744
02:01:18,416 --> 02:01:20,083
So let me start with another

1745
02:01:20,083 --> 02:01:21,791
team, uh, not my team.

1746
02:01:21,875 --> 02:01:23,416
That's the closest to our team.

1747
02:01:24,083 --> 02:01:27,250
And they have some services that are

1748
02:01:27,250 --> 02:01:28,666
fully written in fp-ts

1749
02:01:28,666 --> 02:01:30,083
and using our service

1750
02:01:30,083 --> 02:01:33,625
framework, so they're looking and

1751
02:01:33,625 --> 02:01:34,416
watching us from the

1752
02:01:34,416 --> 02:01:35,791
sidelines, writing Effect

1753
02:01:36,041 --> 02:01:38,375
code line, because we're enjoying this

1754
02:01:38,375 --> 02:01:39,916
opportunity of building a completely

1755
02:01:40,041 --> 02:01:41,125
new service from scratch.

1756
02:01:42,083 --> 02:01:43,666
And, uh, they're, they weren't so lucky.

1757
02:01:43,666 --> 02:01:44,625
So they're still stuck

1758
02:01:44,625 --> 02:01:46,791
with their fp-ts project.

1759
02:01:46,958 --> 02:01:49,583
And they're just looking at us, uh,

1760
02:01:50,125 --> 02:01:52,875
and are maybe a little bit jealous,

1761
02:01:53,208 --> 02:01:55,250
of us that we're writing effect

1762
02:01:55,250 --> 02:01:56,916
already because they've been looking

1763
02:01:56,916 --> 02:01:58,416
forward to writing effect as well.

1764
02:01:59,041 --> 02:02:01,125
But, but I'm helping them try to

1765
02:02:01,125 --> 02:02:04,125
figure out how to migrate, fp-ts to

1766
02:02:04,166 --> 02:02:05,916
effect also incrementally

1767
02:02:05,916 --> 02:02:07,250
it's, it's a bit tough.

1768
02:02:07,250 --> 02:02:08,916
Especially if you have your own

1769
02:02:08,916 --> 02:02:11,958
abstractions and own ways of doing things

1770
02:02:12,041 --> 02:02:15,250
with fp-ts, so it's really slow.

1771
02:02:15,250 --> 02:02:17,791
And also it's really hard to justify, to

1772
02:02:17,791 --> 02:02:20,666
spend the time to fully migrate a

1773
02:02:20,958 --> 02:02:22,750
rather large project in one go.

1774
02:02:23,083 --> 02:02:24,708
So it really has to be incremental.

1775
02:02:25,166 --> 02:02:26,041
So that's, that's a

1776
02:02:26,041 --> 02:02:27,000
positive feedback from them.

1777
02:02:27,666 --> 02:02:30,458
But then we also have teams that are

1778
02:02:30,458 --> 02:02:32,458
outside of our immediate organization

1779
02:02:33,166 --> 02:02:36,250
and they are, let's say more TypeScript

1780
02:02:36,250 --> 02:02:40,708
native teams and they have completely

1781
02:02:40,958 --> 02:02:44,333
different requirements from, from my team

1782
02:02:44,333 --> 02:02:46,541
and from the other Guide team.

1783
02:02:46,791 --> 02:02:49,041
Because Effect was not their choice.

1784
02:02:49,041 --> 02:02:51,541
It was our choice for, for the

1785
02:02:51,541 --> 02:02:52,583
TypeScript service framework.

1786
02:02:52,583 --> 02:02:52,916
Right.

1787
02:02:53,250 --> 02:02:55,333
And the service framework does

1788
02:02:55,333 --> 02:02:58,875
provide a lot of value, but without

1789
02:02:58,875 --> 02:03:01,583
knowing Effect necessarily or fp-ts

1790
02:03:01,583 --> 02:03:04,083
even it's really hard to tap into

1791
02:03:04,083 --> 02:03:06,416
that value and, and use it immediately in

1792
02:03:06,416 --> 02:03:08,000
your project, which knows nothing

1793
02:03:08,000 --> 02:03:10,333
about fp-ts or Effect and the engineers

1794
02:03:10,333 --> 02:03:12,083
know nothing about fp-ts and Effect.

1795
02:03:12,500 --> 02:03:15,875
So here Effect actually brings some

1796
02:03:15,875 --> 02:03:17,583
really good tools, that can

1797
02:03:17,583 --> 02:03:20,625
help bridge between the two

1798
02:03:20,625 --> 02:03:21,875
requirements and

1799
02:03:21,875 --> 02:03:23,916
that's the adapter layers.

1800
02:03:24,375 --> 02:03:25,875
So basically when you have an Effect, you

1801
02:03:25,875 --> 02:03:28,083
can run it as a promise or you have

1802
02:03:28,083 --> 02:03:29,875
a promise and then you can wrap it into

1803
02:03:29,875 --> 02:03:31,666
an effect using different APIs.

1804
02:03:32,666 --> 02:03:35,458
So in our service framework, this is

1805
02:03:35,458 --> 02:03:37,625
something that we're going to be leaning

1806
02:03:37,625 --> 02:03:41,208
on more and more because we want to

1807
02:03:41,208 --> 02:03:44,000
provide the benefit to all the users

1808
02:03:44,500 --> 02:03:45,166
regardless whether

1809
02:03:45,166 --> 02:03:46,333
they choose effect or not.

1810
02:03:47,166 --> 02:03:49,916
So for every effect API, we can have a

1811
02:03:49,916 --> 02:03:51,958
rule that we will also be able to a

1812
02:03:51,958 --> 02:03:54,166
promise based API, which is fully built

1813
02:03:54,166 --> 02:03:55,916
on top of the effect, because we're just

1814
02:03:56,166 --> 02:03:58,583
going to satisfy all the dependencies at

1815
02:03:58,583 --> 02:04:01,250
the time and, and run it as a promise.

1816
02:04:02,250 --> 02:04:04,666
And then they can always look up what

1817
02:04:04,666 --> 02:04:05,333
kind of failure

1818
02:04:05,333 --> 02:04:07,958
modes there can be because they can just

1819
02:04:07,958 --> 02:04:10,333
follow by convention, or by

1820
02:04:10,333 --> 02:04:12,041
inspecting the implementation.

1821
02:04:12,375 --> 02:04:14,291
They can see which effect APIs,

1822
02:04:14,291 --> 02:04:16,708
rather which service framework effect

1823
02:04:16,708 --> 02:04:18,541
based service framework API is wrapped

1824
02:04:18,541 --> 02:04:20,541
and then discover the

1825
02:04:20,541 --> 02:04:21,416
type signature there.

1826
02:04:22,041 --> 02:04:24,250
So that's, that's one way how they can

1827
02:04:24,250 --> 02:04:25,291
reap the benefit of knowing

1828
02:04:25,291 --> 02:04:26,541
what kind of errors there are.

1829
02:04:26,541 --> 02:04:27,208
They don't have to

1830
02:04:27,208 --> 02:04:29,583
inspect all the depths.

1831
02:04:30,041 --> 02:04:32,041
I don't know how even people were doing

1832
02:04:32,041 --> 02:04:33,250
it with like regular

1833
02:04:33,250 --> 02:04:34,000
type script libraries.

1834
02:04:34,416 --> 02:04:35,833
You know, how do you discover what

1835
02:04:35,833 --> 02:04:37,583
kind of errors you may encounter?

1836
02:04:37,875 --> 02:04:39,875
Like, I think typically you don't and you

1837
02:04:39,875 --> 02:04:41,916
discovered during runtime and logging.

1838
02:04:42,666 --> 02:04:43,541
Yeah, exactly.

1839
02:04:44,458 --> 02:04:46,458
It will be so nice to know like, Oh,

1840
02:04:46,458 --> 02:04:48,166
here's the documentation page.

1841
02:04:48,583 --> 02:04:52,583
It lists all the 150 ways of my program

1842
02:04:52,583 --> 02:04:54,333
failing or my library failing.

1843
02:04:54,750 --> 02:04:56,666
But this, this doesn't exist.

1844
02:04:56,958 --> 02:04:59,708
I at least I have not seen a library

1845
02:04:59,708 --> 02:05:01,375
documenting their

1846
02:05:01,375 --> 02:05:02,333
implementation or

1847
02:05:02,333 --> 02:05:04,416
their API's to this level.

1848
02:05:04,416 --> 02:05:05,916
It would also be really terrible to

1849
02:05:05,916 --> 02:05:07,708
maintain the documentation for this.

1850
02:05:07,833 --> 02:05:09,916
I mean, we have the perfect primitive for

1851
02:05:09,916 --> 02:05:11,958
that, which are types and I

1852
02:05:11,958 --> 02:05:14,750
guess more modern programming languages,

1853
02:05:14,750 --> 02:05:16,958
such as Rust, et cetera, they have

1854
02:05:16,958 --> 02:05:19,625
figured this out and they return results

1855
02:05:19,625 --> 02:05:21,291
in case something can go wrong.

1856
02:05:21,958 --> 02:05:24,791
And I mean, Effect is about the same idea

1857
02:05:24,791 --> 02:05:26,041
that you don't just return

1858
02:05:26,250 --> 02:05:29,000
just the success value, but also you're

1859
02:05:29,000 --> 02:05:31,416
returning the, the errors just through

1860
02:05:31,416 --> 02:05:34,000
the return channel as, as other things as

1861
02:05:34,000 --> 02:05:35,291
well, but coming back to

1862
02:05:35,291 --> 02:05:37,291
the point you were just making, I liked

1863
02:05:37,291 --> 02:05:39,833
that approach that basically for

1864
02:05:39,833 --> 02:05:43,416
the folks in your organization who are

1865
02:05:43,416 --> 02:05:45,708
already excited and interested about

1866
02:05:45,750 --> 02:05:48,250
Effect, they can already start consuming

1867
02:05:48,250 --> 02:05:50,750
the effect API's for the ones who

1868
02:05:50,791 --> 02:05:53,541
are still on the fence or are not quite

1869
02:05:53,541 --> 02:05:55,166
ready to make the jump yet.

1870
02:05:55,458 --> 02:05:58,666
They can still stay in the Promise land

1871
02:05:58,666 --> 02:06:01,583
and need to deal with,

1872
02:06:01,583 --> 02:06:03,875
errors, et cetera, the, the good, bad

1873
02:06:03,875 --> 02:06:06,208
way, um, the old bad way.

1874
02:06:07,541 --> 02:06:09,125
Which sort of questions do you typically

1875
02:06:09,125 --> 02:06:11,583
hear when someone is as

1876
02:06:11,625 --> 02:06:14,041
confronted with Effect, I suppose

1877
02:06:14,041 --> 02:06:16,458
there's a full spectrum of people.

1878
02:06:16,791 --> 02:06:19,666
You immediately get it and are excited to

1879
02:06:19,666 --> 02:06:23,041
dig in to people who are maybe curious,

1880
02:06:23,250 --> 02:06:24,958
but don't quite get it.

1881
02:06:25,208 --> 02:06:27,125
And then maybe people who are much

1882
02:06:27,125 --> 02:06:30,125
more skeptical and maybe this

1883
02:06:30,125 --> 02:06:32,083
reminds them of like some other bad time

1884
02:06:32,083 --> 02:06:35,458
they had in the past and why they have

1885
02:06:35,500 --> 02:06:36,458
reasons in mind, why

1886
02:06:36,458 --> 02:06:37,541
they don't want to adopt it.

1887
02:06:37,583 --> 02:06:39,833
So tell me more about the different kinds

1888
02:06:39,833 --> 02:06:41,250
of reactions that you've seen.

1889
02:06:42,333 --> 02:06:42,541
Yes.

1890
02:06:43,333 --> 02:06:46,333
So I've done a few

1891
02:06:46,333 --> 02:06:48,291
Effect related presentations

1892
02:06:48,500 --> 02:06:49,208
at Zendesk already.

1893
02:06:49,958 --> 02:06:52,750
I presented at our annual tech

1894
02:06:52,750 --> 02:06:54,458
conference in May.

1895
02:06:54,583 --> 02:06:56,875
So I had the opportunity to actually

1896
02:06:56,875 --> 02:07:01,000
get some of those questions and lots

1897
02:07:01,000 --> 02:07:02,458
of people are actually skeptical.

1898
02:07:03,041 --> 02:07:05,166
Maybe due to their own

1899
02:07:05,166 --> 02:07:06,250
experience with something

1900
02:07:06,250 --> 02:07:07,708
similar that they tried or

1901
02:07:07,708 --> 02:07:10,833
just, it just looks too functional for

1902
02:07:10,833 --> 02:07:14,708
them and they're more familiar in the

1903
02:07:14,708 --> 02:07:17,916
OP and dynamically typed languages.

1904
02:07:18,333 --> 02:07:21,333
They don't necessarily understand it.

1905
02:07:21,333 --> 02:07:23,083
Like at Zendesk, we have lots of

1906
02:07:23,083 --> 02:07:25,375
engineers who have experienced all

1907
02:07:25,375 --> 02:07:27,625
the issues related to scale

1908
02:07:27,625 --> 02:07:29,041
maintainability,

1909
02:07:29,041 --> 02:07:30,583
testability, reliability,

1910
02:07:30,833 --> 02:07:35,000
all these things, but still this alone is

1911
02:07:35,000 --> 02:07:36,458
not necessarily

1912
02:07:36,458 --> 02:07:38,791
not a huge selling point for them necessarily

1913
02:07:38,916 --> 02:07:39,583
because they already

1914
02:07:39,583 --> 02:07:41,125
have their ways around it.

1915
02:07:41,166 --> 02:07:43,125
Like they have years of experience doing

1916
02:07:43,125 --> 02:07:45,291
Ruby years of experience doing whatever.

1917
02:07:45,916 --> 02:07:48,083
And they, they know their way around it.

1918
02:07:48,083 --> 02:07:49,583
Maybe they don't even care necessarily

1919
02:07:49,583 --> 02:07:52,291
about super reliability because

1920
02:07:52,666 --> 02:07:53,916
there's like feature flex.

1921
02:07:54,291 --> 02:07:55,750
So you can basically not break

1922
02:07:55,750 --> 02:07:57,541
everybody at the same time, but you just

1923
02:07:57,916 --> 02:08:01,916
break a tiny bit of, uh, of the

1924
02:08:01,916 --> 02:08:04,541
customers, which is understandable.

1925
02:08:04,916 --> 02:08:07,500
If you don't have any other option

1926
02:08:07,500 --> 02:08:10,166
because you're limiting the blast radius.

1927
02:08:10,250 --> 02:08:11,916
But it's also not something I'm

1928
02:08:11,916 --> 02:08:13,333
really a big fan of.

1929
02:08:13,375 --> 02:08:16,041
Like I really want to catch the errors

1930
02:08:16,041 --> 02:08:18,333
and possible failure cases even

1931
02:08:18,333 --> 02:08:19,750
before I commit my changes.

1932
02:08:20,000 --> 02:08:21,291
Like that's the ideal thing.

1933
02:08:21,916 --> 02:08:23,458
I don't even want to push it somewhere to

1934
02:08:23,458 --> 02:08:26,625
a CI and then waste CPU cycles,

1935
02:08:26,625 --> 02:08:29,333
of a CI just to make it fail.

1936
02:08:29,333 --> 02:08:32,541
Um, and then repeat rinse and repeat many

1937
02:08:32,541 --> 02:08:34,750
times possibly, because also sometimes

1938
02:08:34,750 --> 02:08:36,833
it's really hard to run all the things

1939
02:08:36,833 --> 02:08:39,666
that the CI runs locally due to different

1940
02:08:39,666 --> 02:08:42,250
limitations, but yeah, so we have these

1941
02:08:42,250 --> 02:08:44,250
people who know their way around.

1942
02:08:44,958 --> 02:08:47,541
So for them, maybe a bigger concern is

1943
02:08:47,541 --> 02:08:48,458
usually, okay, but

1944
02:08:48,458 --> 02:08:50,875
listen, we have so many

1945
02:08:50,875 --> 02:08:53,250
different technologies at Zendesk, we have

1946
02:08:53,250 --> 02:08:56,291
to consolidate like, why should this be

1947
02:08:56,291 --> 02:08:57,916
the thing that we consolidate on?

1948
02:08:58,166 --> 02:08:59,458
How will you align with

1949
02:08:59,458 --> 02:09:02,041
all these hundreds of engineers

1950
02:09:02,333 --> 02:09:03,750
on the single one technology?

1951
02:09:03,958 --> 02:09:05,791
Obviously we have some processes like

1952
02:09:05,791 --> 02:09:09,291
ADRs and whatnot, but if it comes

1953
02:09:09,291 --> 02:09:12,125
to a big change like this, obviously

1954
02:09:12,125 --> 02:09:13,541
there's going to be also resistance

1955
02:09:13,666 --> 02:09:15,875
because people just are accustomed to

1956
02:09:15,875 --> 02:09:18,958
to the status quo.

1957
02:09:18,958 --> 02:09:21,291
And they're their way of operating and

1958
02:09:21,291 --> 02:09:22,916
they don't necessarily want to switch.

1959
02:09:23,833 --> 02:09:25,208
Which is totally reasonable.

1960
02:09:25,875 --> 02:09:28,041
And I don't want to change anybody's

1961
02:09:28,041 --> 02:09:31,083
mind or I don't want to force

1962
02:09:31,125 --> 02:09:34,333
anybody to now, you know, forget about

1963
02:09:34,333 --> 02:09:35,625
promise land and

1964
02:09:35,625 --> 02:09:37,500
start incorporating

1965
02:09:37,541 --> 02:09:38,625
Effect into your code

1966
02:09:38,625 --> 02:09:39,916
base starting tomorrow.

1967
02:09:40,958 --> 02:09:43,083
I truly believe it should be like a

1968
02:09:43,083 --> 02:09:45,375
choice that everybody

1969
02:09:45,375 --> 02:09:46,875
can make for themselves.

1970
02:09:47,458 --> 02:09:49,333
But then you have, you know, the company

1971
02:09:49,333 --> 02:09:51,833
incentives to try and consolidate to,

1972
02:09:52,291 --> 02:09:54,875
to not go into too many directions

1973
02:09:54,875 --> 02:09:57,916
because if you want to be productive at,

1974
02:09:57,916 --> 02:09:59,708
at the top level, you know, at an

1975
02:09:59,708 --> 02:10:02,041
organizational level, like the more

1976
02:10:02,041 --> 02:10:05,250
people pull in the same direction, the

1977
02:10:05,250 --> 02:10:08,208
better you are and the more productive

1978
02:10:08,208 --> 02:10:09,166
you are.

1979
02:10:09,208 --> 02:10:10,625
So these are also a little bit

1980
02:10:10,625 --> 02:10:13,250
political, uh, you know, influence

1981
02:10:13,583 --> 02:10:16,375
and political, it's a

1982
02:10:16,375 --> 02:10:17,583
question of politics as well.

1983
02:10:17,833 --> 02:10:18,958
Like how can you influence

1984
02:10:18,958 --> 02:10:22,250
without being in a big leadership

1985
02:10:22,541 --> 02:10:23,750
position and stuff like that.

1986
02:10:24,083 --> 02:10:26,375
Have you found some arguments like from

1987
02:10:26,375 --> 02:10:28,500
the many things that Effects can offer

1988
02:10:28,958 --> 02:10:32,125
that has resonated still with the people

1989
02:10:32,125 --> 02:10:33,666
who are more in the skeptical spectrum?

1990
02:10:34,500 --> 02:10:34,666
Yes.

1991
02:10:35,291 --> 02:10:39,708
Um, so sometimes I do, because let's say

1992
02:10:39,708 --> 02:10:42,166
you're a company and then now you

1993
02:10:42,166 --> 02:10:44,833
had this financial crisis where the

1994
02:10:44,833 --> 02:10:48,416
interest rates went up and now, uh, you

1995
02:10:48,416 --> 02:10:50,500
figure out that money doesn't grow on the

1996
02:10:50,500 --> 02:10:53,333
trees and you have layoffs and whatnot.

1997
02:10:53,791 --> 02:10:56,958
And suddenly you stop backfilling for

1998
02:10:56,958 --> 02:11:00,125
positions, you know, which, which

1999
02:11:00,125 --> 02:11:01,333
came up because of churn

2000
02:11:01,333 --> 02:11:03,833
and you're not used to pairing.

2001
02:11:04,041 --> 02:11:04,875
So you have hiring

2002
02:11:04,875 --> 02:11:06,125
freeze or whatever suddenly.

2003
02:11:06,583 --> 02:11:08,500
And, but the expectations of productivity

2004
02:11:08,500 --> 02:11:09,833
are staying the same.

2005
02:11:09,875 --> 02:11:10,625
So basically you have

2006
02:11:10,625 --> 02:11:12,416
more workload per person.

2007
02:11:13,083 --> 02:11:15,041
That's, that's the final result.

2008
02:11:15,791 --> 02:11:17,625
The company still expects you to deliver,

2009
02:11:17,833 --> 02:11:20,416
but now you are fewer people to do so.

2010
02:11:20,916 --> 02:11:22,291
It's, it's a hypothetical one.

2011
02:11:22,500 --> 02:11:22,708
Right.

2012
02:11:22,916 --> 02:11:25,541
So what do you do?

2013
02:11:25,541 --> 02:11:27,833
Well, I think TypeScript is positioned

2014
02:11:27,833 --> 02:11:28,875
really well because

2015
02:11:28,875 --> 02:11:30,541
you can have TypeScript

2016
02:11:30,541 --> 02:11:32,458
both on the front end, which in many

2017
02:11:32,458 --> 02:11:34,166
cases you do, and then

2018
02:11:34,166 --> 02:11:34,958
you can have it on the

2019
02:11:34,958 --> 02:11:35,875
back end as well, which

2020
02:11:35,875 --> 02:11:37,291
is, isn't a terrible option.

2021
02:11:37,791 --> 02:11:40,041
Especially like, you know, you have NodeJS

2022
02:11:40,041 --> 02:11:42,500
or Dino or whatever, nodeJS with

2023
02:11:42,500 --> 02:11:46,416
its event loop runtime, perfectly suited

2024
02:11:46,416 --> 02:11:49,291
for i/o heavy operations.

2025
02:11:50,125 --> 02:11:53,500
And as far as I'm aware, like 90% of what

2026
02:11:53,500 --> 02:11:54,958
Zendesk does is i/o heavy.

2027
02:11:55,625 --> 02:11:57,916
We take a message, no matter where it

2028
02:11:57,916 --> 02:12:00,500
comes from, we do some processing and

2029
02:12:00,500 --> 02:12:02,666
we send a message somewhere else.

2030
02:12:02,708 --> 02:12:05,041
Like maybe it's like you, you, you start

2031
02:12:05,041 --> 02:12:07,208
a record in the database or you emit a

2032
02:12:07,208 --> 02:12:09,583
thing in Kafka, maybe you have like a

2033
02:12:09,583 --> 02:12:11,625
MySQL connector with Kafka, so you can

2034
02:12:11,625 --> 02:12:13,166
do these things

2035
02:12:13,166 --> 02:12:14,041
in a single transaction.

2036
02:12:14,750 --> 02:12:16,291
So basically you manage your distributed

2037
02:12:16,291 --> 02:12:17,375
transactions this way.

2038
02:12:17,833 --> 02:12:20,458
So you do a ton of like taking things

2039
02:12:20,458 --> 02:12:21,875
from here, pushing there.

2040
02:12:22,416 --> 02:12:23,416
A lot of waiting time, a

2041
02:12:23,416 --> 02:12:25,333
lot of i/o, what do you do?

2042
02:12:25,416 --> 02:12:27,166
Like with Ruby, obviously.

2043
02:12:27,208 --> 02:12:28,250
And this is another thing

2044
02:12:28,250 --> 02:12:30,166
that I often mention is cost.

2045
02:12:30,916 --> 02:12:34,500
Like if you have nodeJS handling

2046
02:12:34,500 --> 02:12:37,166
traffic, like large concurrent

2047
02:12:37,333 --> 02:12:40,916
traffic, heavy traffic, you can save a

2048
02:12:40,916 --> 02:12:43,291
lot of cost because with Ruby.

2049
02:12:44,000 --> 02:12:45,333
What's your option there?

2050
02:12:45,708 --> 02:12:48,083
Well, yes, you can use threads, but then

2051
02:12:48,083 --> 02:12:50,125
your memory consumption goes up because

2052
02:12:50,333 --> 02:12:51,916
threats are not for free.

2053
02:12:52,208 --> 02:12:54,666
Or you can scale horizontally.

2054
02:12:54,666 --> 02:12:56,708
So when you put the horizontal pod

2055
02:12:56,708 --> 02:12:59,583
autoscaler max it out at 24 replicas

2056
02:12:59,583 --> 02:13:02,583
or whatever you figure out the rules

2057
02:13:02,583 --> 02:13:04,125
around how to increase the

2058
02:13:04,125 --> 02:13:06,875
replica count by how much, when, what is

2059
02:13:06,875 --> 02:13:08,291
the signal that you're looking at?

2060
02:13:08,291 --> 02:13:10,208
You know, you can figure out all of these

2061
02:13:10,208 --> 02:13:12,333
things, or you can

2062
02:13:12,333 --> 02:13:14,333
just have a few replicas,

2063
02:13:14,333 --> 02:13:17,416
maybe one per availability zone, 2

2064
02:13:17,416 --> 02:13:19,375
per availability zone for extra

2065
02:13:19,458 --> 02:13:20,375
redundancy

2066
02:13:20,375 --> 02:13:22,083
of a node, uh, process.

2067
02:13:22,083 --> 02:13:22,833
And then suddenly you

2068
02:13:22,833 --> 02:13:24,000
have a throughput of what?

2069
02:13:24,625 --> 02:13:26,708
Tens of thousands of requests per second.

2070
02:13:27,333 --> 02:13:30,333
So, so it's also money, you know?

2071
02:13:30,333 --> 02:13:32,750
So when you, when you talk to high, uh,

2072
02:13:32,750 --> 02:13:35,250
to the leadership, you have to

2073
02:13:35,250 --> 02:13:36,125
convince them with some

2074
02:13:36,125 --> 02:13:38,125
hard hitting facts.

2075
02:13:38,416 --> 02:13:40,666
And it's not just, obviously you can say,

2076
02:13:40,666 --> 02:13:42,833
ah, in theory, this works.

2077
02:13:43,000 --> 02:13:45,000
No, you have to sit down, do the

2078
02:13:45,000 --> 02:13:46,583
analysis, maybe set up

2079
02:13:46,583 --> 02:13:47,916
some project which can

2080
02:13:48,083 --> 02:13:51,416
demonstrate how much more cost

2081
02:13:51,416 --> 02:13:54,000
efficient it is compared to other similar

2082
02:13:54,083 --> 02:13:56,625
workloads, put it into

2083
02:13:56,625 --> 02:14:00,208
money, uh, values, right?

2084
02:14:00,791 --> 02:14:02,916
Uh, convert it into dollars or whatever,

2085
02:14:02,916 --> 02:14:05,125
and then show the difference.

2086
02:14:05,708 --> 02:14:08,458
And then once you do this, you know, you,

2087
02:14:08,458 --> 02:14:10,166
you, you won the golden ticket or

2088
02:14:10,208 --> 02:14:12,291
something because it comes down to

2089
02:14:12,291 --> 02:14:13,458
money in the end always.

2090
02:14:13,958 --> 02:14:15,208
Yeah, totally.

2091
02:14:15,250 --> 02:14:18,166
And I agree with that approach that

2092
02:14:18,166 --> 02:14:20,583
you can basically like, let the

2093
02:14:20,583 --> 02:14:22,666
actions, actions speak louder than words.

2094
02:14:22,916 --> 02:14:24,541
And you're doing

2095
02:14:24,541 --> 02:14:26,083
the right work already.

2096
02:14:26,541 --> 02:14:29,166
You're are shipping things in production.

2097
02:14:29,666 --> 02:14:32,625
You're appreciating and leveraging all

2098
02:14:32,625 --> 02:14:34,208
the benefits that

2099
02:14:34,208 --> 02:14:35,416
Effect provides to you.

2100
02:14:35,958 --> 02:14:39,541
And I think the, your team and some other

2101
02:14:39,541 --> 02:14:41,166
peer teams have a great

2102
02:14:41,250 --> 02:14:42,916
experience already with Effect.

2103
02:14:42,916 --> 02:14:46,000
And I think those will show the results

2104
02:14:46,000 --> 02:14:48,875
and that might make a case for itself

2105
02:14:49,500 --> 02:14:52,166
and prove out that it's not just words,

2106
02:14:52,166 --> 02:14:54,208
but it's actually an improved

2107
02:14:54,208 --> 02:14:58,125
reality that makes teams more effective,

2108
02:14:58,583 --> 02:15:00,916
more efficient, happier, and

2109
02:15:00,916 --> 02:15:04,333
possibly also then saves resources and

2110
02:15:04,333 --> 02:15:06,166
money when it comes to running those

2111
02:15:06,166 --> 02:15:07,458
services,

2112
02:15:07,458 --> 02:15:09,375
saves down times, et cetera.

2113
02:15:09,625 --> 02:15:13,000
So I'm sure the, the more time continues,

2114
02:15:13,625 --> 02:15:15,250
the more all of those arguments

2115
02:15:15,458 --> 02:15:16,083
going to resolve

2116
02:15:16,083 --> 02:15:17,791
themselves in your favor.

2117
02:15:18,541 --> 02:15:20,583
And I applaud you for being

2118
02:15:20,583 --> 02:15:22,291
on the early adopter train.

2119
02:15:24,291 --> 02:15:24,625
Thank you.

2120
02:15:24,833 --> 02:15:26,750
I, I do hope that it

2121
02:15:26,750 --> 02:15:28,000
plays out really well.

2122
02:15:28,750 --> 02:15:29,958
I'll do my part for sure.

2123
02:15:30,958 --> 02:15:31,250
Perfect.

2124
02:15:31,958 --> 02:15:34,208
So maybe that leads me to the last

2125
02:15:34,208 --> 02:15:36,500
question that I'd love to hear your

2126
02:15:36,500 --> 02:15:38,833
thoughts on, which is what gets you most

2127
02:15:38,833 --> 02:15:41,166
excited about the future with Effect.

2128
02:15:43,125 --> 02:15:43,375
Yes.

2129
02:15:44,125 --> 02:15:45,958
Ah, that's a good question.

2130
02:15:47,458 --> 02:15:51,125
I haven't put a lot of research into

2131
02:15:51,125 --> 02:15:53,666
Effect Cluster, but it's definitely

2132
02:15:53,708 --> 02:15:56,000
something I'm observing again from the

2133
02:15:56,000 --> 02:15:58,166
sidelines and look forward to using

2134
02:15:58,416 --> 02:16:00,375
in the future, maybe for some

2135
02:16:00,375 --> 02:16:03,416
use cases like backfills, let's say.

2136
02:16:04,333 --> 02:16:07,750
I have my event sourced service and now I

2137
02:16:07,750 --> 02:16:11,583
evolve my, uh, event schema from version

2138
02:16:11,583 --> 02:16:12,833
one to version two,

2139
02:16:12,833 --> 02:16:13,750
maybe two version three.

2140
02:16:14,708 --> 02:16:18,166
And now I feel like, okay, my switch

2141
02:16:18,166 --> 02:16:20,250
statements where we, where I, where I

2142
02:16:20,250 --> 02:16:22,000
switch between the versions of the schema

2143
02:16:22,000 --> 02:16:25,541
and then, uh, the way I'm reducing the

2144
02:16:25,666 --> 02:16:28,041
events into a single aggregate, it's

2145
02:16:28,041 --> 02:16:29,041
getting a bit cumbersome.

2146
02:16:29,750 --> 02:16:31,666
So let's just migrate some of those old

2147
02:16:31,666 --> 02:16:33,791
schema versions to the latest one.

2148
02:16:34,166 --> 02:16:37,791
So having like millions, maybe billions

2149
02:16:37,791 --> 02:16:40,416
of records, it could take quite

2150
02:16:40,416 --> 02:16:42,250
some time to do this sequentially.

2151
02:16:43,000 --> 02:16:45,666
So having like a solution where I can

2152
02:16:45,666 --> 02:16:48,458
have set up some workers, which can agree

2153
02:16:48,500 --> 02:16:50,541
on, you know, the scheduling and how

2154
02:16:50,541 --> 02:16:52,250
they're going to partition the database

2155
02:16:52,583 --> 02:16:56,083
table among each other, uh, and do it in

2156
02:16:56,083 --> 02:16:59,125
parallel, that, that would be just the.

2157
02:16:59,625 --> 02:17:01,333
You know, perfect dream come true.

2158
02:17:01,333 --> 02:17:03,958
I don't want to start the backfill in

2159
02:17:03,958 --> 02:17:06,416
every cluster one after another, or even

2160
02:17:06,416 --> 02:17:08,708
in parallel, and then like having to like

2161
02:17:08,708 --> 02:17:12,333
watch tens or dozens of, you

2162
02:17:12,333 --> 02:17:14,458
know, monitors to see the progress of

2163
02:17:14,458 --> 02:17:15,250
each individual

2164
02:17:15,250 --> 02:17:17,000
backfill on every Kubernetes

2165
02:17:17,041 --> 02:17:21,291
cluster and then managing that for hours.

2166
02:17:22,208 --> 02:17:24,416
You know, if that could be like maybe a

2167
02:17:24,416 --> 02:17:28,208
10 or 20 minute thing, that would be

2168
02:17:28,208 --> 02:17:29,375
just the perfect dream, right?

2169
02:17:29,791 --> 02:17:31,708
So I'm looking forward to Cluster.

2170
02:17:32,458 --> 02:17:33,208
Yeah, me too.

2171
02:17:33,500 --> 02:17:35,958
This is, uh, one of the, as I said, like,

2172
02:17:35,958 --> 02:17:38,583
uh, be the, the gift that keeps on giving

2173
02:17:38,875 --> 02:17:41,541
and we're going to have like many layers

2174
02:17:41,541 --> 02:17:43,583
built on top of the foundations that

2175
02:17:43,666 --> 02:17:47,000
we already benefit from and the Effect

2176
02:17:47,000 --> 02:17:49,166
Cluster and Effect workflow primitives

2177
02:17:49,291 --> 02:17:50,541
that are in the work and the

2178
02:17:50,541 --> 02:17:51,666
systems that are in the work.

2179
02:17:52,416 --> 02:17:54,875
Uh, I think that's gonna, yeah, that

2180
02:17:54,875 --> 02:17:56,708
that's going to be literally next level.

2181
02:17:56,708 --> 02:17:59,500
This is going to unlock some benefits

2182
02:17:59,500 --> 02:18:02,041
that you see from systems like Temporal

2183
02:18:02,333 --> 02:18:04,916
Temporal IO, not the new time standard,

2184
02:18:05,125 --> 02:18:07,000
but temporal IO, which is about durable

2185
02:18:07,166 --> 02:18:09,958
workflows and, and workflow scheduling

2186
02:18:09,958 --> 02:18:13,208
and running long lived things.

2187
02:18:13,583 --> 02:18:15,916
You can already do that in Effect

2188
02:18:15,916 --> 02:18:19,000
combined with temporal, but Effect

2189
02:18:19,000 --> 02:18:21,708
is the perfect foundation to do that, uh,

2190
02:18:21,708 --> 02:18:23,958
natively with the effect primitives.

2191
02:18:24,208 --> 02:18:27,083
When you think about rerunning something,

2192
02:18:27,083 --> 02:18:29,083
if something has failed scheduling, some

2193
02:18:29,166 --> 02:18:33,375
work, um, processing work across multiple

2194
02:18:33,375 --> 02:18:35,041
workers and massively

2195
02:18:35,041 --> 02:18:36,958
parallelized systems.

2196
02:18:37,500 --> 02:18:39,708
This is where we have like amazing

2197
02:18:39,708 --> 02:18:40,833
foundations for that.

2198
02:18:41,083 --> 02:18:43,250
And that's being systematized with the

2199
02:18:43,250 --> 02:18:45,041
effect cluster and effect workflows

2200
02:18:45,041 --> 02:18:46,750
project, which is now

2201
02:18:46,750 --> 02:18:49,708
in development for, I think also like in

2202
02:18:49,791 --> 02:18:51,625
research for a few years now.

2203
02:18:51,958 --> 02:18:54,500
And I think it's alpha grade right now.

2204
02:18:54,500 --> 02:18:55,625
I think some people are

2205
02:18:55,625 --> 02:18:57,250
already starting to use it.

2206
02:18:57,833 --> 02:19:00,291
I'm actually also planning to give it a

2207
02:19:00,291 --> 02:19:03,041
shot soon for the music app that I'm

2208
02:19:03,041 --> 02:19:05,041
building, and I think it will take a

2209
02:19:05,041 --> 02:19:07,000
little bit of more time to be fully

2210
02:19:07,000 --> 02:19:08,791
production ready, just because it's also

2211
02:19:08,791 --> 02:19:11,541
a very ambitious project, but it's very

2212
02:19:11,541 --> 02:19:12,916
principled and I'm very

2213
02:19:12,916 --> 02:19:15,708
excited about the potential for it.

2214
02:19:15,708 --> 02:19:16,708
And I think we're going to hear a lot

2215
02:19:16,708 --> 02:19:19,041
more about that in the months and years

2216
02:19:19,041 --> 02:19:21,416
to come and possibly the next year's

2217
02:19:21,416 --> 02:19:22,500
Effect Conference already.

2218
02:19:23,500 --> 02:19:25,416
So yeah, super excited that

2219
02:19:25,416 --> 02:19:26,625
you're excited about that.

2220
02:19:27,083 --> 02:19:28,416
Because I think you have some really

2221
02:19:28,416 --> 02:19:29,875
interesting use cases for that.

2222
02:19:30,583 --> 02:19:33,125
So, Attila, thank you so much for

2223
02:19:33,125 --> 02:19:35,666
taking the time today to doing the

2224
02:19:35,666 --> 02:19:38,250
initial episode of the Cause & Effect

2225
02:19:38,250 --> 02:19:40,791
Podcast with me and taking the time.

2226
02:19:41,000 --> 02:19:42,416
So that's much appreciated.

2227
02:19:42,791 --> 02:19:43,666
And thank you so much.

2228
02:19:44,333 --> 02:19:44,708
Thank you.

2229
02:19:44,708 --> 02:19:46,833
It's been a great honor to be the first

2230
02:19:46,833 --> 02:19:49,583
guest of this amazing podcast.

2231
02:19:50,166 --> 02:19:50,375
Perfect.

2232
02:19:50,833 --> 02:19:51,166
Thank you.

2233
02:19:51,750 --> 02:19:52,083
Take care.

2234
02:19:52,500 --> 02:19:52,708
Take care.

2235
02:19:53,166 --> 02:19:54,291
Thank you for listening to

2236
02:19:54,291 --> 02:19:55,791
the "Cause & Effect" podcast.

2237
02:19:56,083 --> 02:19:57,708
If you've enjoyed this episode, please

2238
02:19:57,708 --> 02:19:59,583
subscribe, leave a review,

2239
02:19:59,583 --> 02:20:00,833
and share it with your friends.

2240
02:20:01,375 --> 02:20:03,291
If you haven't done so already, you can

2241
02:20:03,291 --> 02:20:04,916
join our Discord community.

2242
02:20:04,916 --> 02:20:06,958
And if you have any questions, feedback,

2243
02:20:06,958 --> 02:20:09,333
or suggestions about this episode or

2244
02:20:09,333 --> 02:20:10,625
about Effect in general,

2245
02:20:10,875 --> 02:20:12,375
don't hesitate to get in touch.

2246
02:20:13,041 --> 02:20:14,250
See you in the next episode.

